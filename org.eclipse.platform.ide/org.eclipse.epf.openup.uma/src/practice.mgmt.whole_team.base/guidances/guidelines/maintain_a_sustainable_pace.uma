<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="-aoCtIwigi2NOLiclMAXvgQ" name="new_guideline,_KzYHYMLmEdysDsQChI42QQ" guid="-aoCtIwigi2NOLiclMAXvgQ" changeDate="2008-06-18T09:04:51.000+0200" version="7.2.0" mainDescription="&lt;p>&#xD;&#xA;    &lt;i>Sustainable pace&lt;/i> is the rate of work that a team can consistently maintain without burning out team members.&#xD;&#xA;    This concept was popularized by the Extreme Programming (XP) methodology with its 40-hour work week practice, which&#xD;&#xA;    later evolved into the more generic &quot;sustainable pace.&quot;&amp;nbsp;The basic idea is that, although a team can have brief&#xD;&#xA;    spurts of overtime (perhaps for a week or two&amp;nbsp;at a time during critical periods during a project lifecycle), it&#xD;&#xA;    cannot maintain that pace indefinitely.&amp;nbsp;This is analogous to the concept that you cannot sprint throughout a&#xD;&#xA;    marathon.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Strategies to help maintain a sustainable pace:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;strong>Build activities into everyday work&lt;/strong>.&amp;nbsp;This avoids the problem that the activity is scheduled&#xD;&#xA;        into a specific period and, therefore, must&amp;nbsp;be accomplished regardless of how much effort it requires. For&#xD;&#xA;        example, instead of leaving testing to the end of a project, test all the way through the project.&amp;nbsp;Instead of&#xD;&#xA;        modeling only at the beginning of a project, model all the way through only when you need the relevant information&#xD;&#xA;        and only to the extent that you currently need.&amp;nbsp;&amp;nbsp;&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;strong>Organize the project into short iterations&lt;/strong>.&amp;nbsp;Short iterations provide the opportunity for&#xD;&#xA;        small &quot;pebbles&quot; (which show progress) rather than huge &quot;milestones.&quot;&amp;nbsp;Continuous feedback reduces&#xD;&#xA;        the&amp;nbsp;need&amp;nbsp;to work long hours. Also,&amp;nbsp;it helps focus on finding ways to consistently achieve the&#xD;&#xA;        regular deliveries.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;strong>Adopt a continuous integration strategy&lt;/strong>.&amp;nbsp;By frequently merging code, compiling it, testing&#xD;&#xA;        it, and running appropriate code analysis against it, you increase the quality of your work through finding and&#xD;&#xA;        then fixing defects quickly and easily.&amp;nbsp;This reduces the chance of major problems in your work, thereby&#xD;&#xA;        reducing a primary motivator of unexpected overtime.&amp;nbsp;&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;strong>Question long hours&lt;/strong>.&amp;nbsp;Productivity does not increase with hours worked.&amp;nbsp;Tired people are&#xD;&#xA;        far&amp;nbsp;less productive than well-rested ones.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;strong>Recognize sustained overtime as a failure&lt;/strong>.&amp;nbsp;If a team needs to work overtime for more&#xD;&#xA;        than&amp;nbsp;two weeks in a row, that is a reflection of poor planning or&amp;nbsp;inadequate resources allocation.&amp;nbsp;&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;strong>Recognize that you're still working hard at a sustainable pace&lt;/strong>.&amp;nbsp;Just because you are working&#xD;&#xA;        at a sustainable pace, it&amp;nbsp;doesn't mean that the team is not working hard enough. Rather, it is&amp;nbsp;typically&#xD;&#xA;        an indication that&amp;nbsp;the team is&amp;nbsp;a &quot;well-oiled machine.&quot;&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>" longPresentationName="new_guideline,_KzYHYMLmEdysDsQChI42QQ"/>
