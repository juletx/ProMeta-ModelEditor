<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="-6Y-YTrnh2OzIAbHk2eZFiA" name="how_to_adopt_abrd,_lV38AFUdEd2sDeWJVZ0Ifg" guid="-6Y-YTrnh2OzIAbHk2eZFiA" authors="Jerome Boyer" changeDate="2010-08-15T17:44:24.000+0200" version="7.5.0" mainDescription="&lt;p>&#xA;    The goal of a BRMS is to be able to manage business rule as a standalone artifact, owned by the business user, and&#xA;    maintainable over time into production system. The implementation of a business rule application follows some&#xA;    activities and tasks that are slightly different than traditional software development life cycle. The integration of&#xA;    one or more business analysts as part of the development team is also less traditional. Finally the core value of such&#xA;    technology is to be able to have business user maintaining the business rules in production with a minimum involvement&#xA;    of&amp;nbsp;IT. Technology is one side of the coin, methodology and best practices is the other.&#xA;&lt;/p>&#xA;&lt;p>&#xA;    A project management office can leverage ABRD as is to integrate it as content for their own methodology.&#xA;&lt;/p>&#xA;&lt;p>&#xA;    If the team is new to business rule application, it is best to start with a small rule set and incrementally add rules&#xA;    and best practices over time. The team has to integrate the rule discovery and analysis activities in their own project&#xA;    plan.&amp;nbsp;&#xA;&lt;/p>&#xA;&lt;p>&#xA;    Prototyping is a major value, as it shows to the team concrete execution, and helps to drive issues, and requirements&#xA;    around business rules and even business process.&#xA;&lt;/p>&#xA;&lt;h3>&#xA;    Common Pitfalls&amp;nbsp;&#xA;&lt;/h3>&#xA;&lt;p>&#xA;    The most common pitfalls in implementing business rules application include:&#xA;&lt;/p>&#xA;&lt;ul>&#xA;    &lt;li>&#xA;        Harvest all the rules in documentation&#xA;    &lt;/li>&#xA;    &lt;li>&#xA;        Forget about the data model&#xA;    &lt;/li>&#xA;    &lt;li>&#xA;        Do not understand&amp;nbsp;where the rules are enforced&#xA;    &lt;/li>&#xA;    &lt;li>&#xA;        Mix data model from the implementation point of view,&amp;nbsp;versus the domain model, understood by the business&#xA;    &lt;/li>&#xA;    &lt;li>&#xA;        Involve IT only: never forget the business, involve business as early as possible, make them taking ownership of&#xA;        the rules.&#xA;    &lt;/li>&#xA;    &lt;li>&#xA;        Outsource&amp;nbsp;business rule implementation: business rules are enterprise assets: the&amp;nbsp;difference between to&#xA;        insurance policy underlying rules make two&amp;nbsp;insurance companies competing and bringing different values.&#xA;    &lt;/li>&#xA;    &lt;li>&#xA;        Forget to test the rules outside of the application&#xA;    &lt;/li>&#xA;    &lt;li>&#xA;        Do not involve business in the rule validation&#xA;    &lt;/li>&#xA;    &lt;li>&#xA;        Badly design a rule set, by not applying standard design pattern as separation of concerns.&lt;br />&#xA;        &lt;br />&#xA;        &amp;nbsp;&#xA;    &lt;/li>&#xA;&lt;/ul>" longPresentationName="how_to_adopt_abrd,_lV38AFUdEd2sDeWJVZ0Ifg"/>
