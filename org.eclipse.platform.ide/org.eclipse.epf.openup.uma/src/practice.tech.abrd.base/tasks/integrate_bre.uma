<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="-G84eS7wnll4Jn8DpfP2lSw" name="integrate_bre,_6-p2EH_BEd2YWI_0AZcMOA" guid="-G84eS7wnll4Jn8DpfP2lSw" authors="Jerome Boyer" changeDate="2008-09-25T10:42:29.000+0200" version="7.5.0" mainDescription="&lt;p>&#xA;    The Rule Engine as an executable class, callable using proprietary API or the JSR94 API. Rule Engine can be an embedded&#xA;    component or deployed within a pool as reusable components.&#xA;&lt;/p>&#xA;&lt;p>&#xA;    When designing a SOA and the different decision services, the architect should focus and apply the same design pattern&#xA;    as other business services. The rule engine technology choice is an implementation decision not a service design one.&#xA;    The service design has to address:&#xA;&lt;/p>&#xA;&lt;ul>&#xA;    &lt;li>&#xA;        the service definition: one or more operations linked to the same data semantic&#xA;    &lt;/li>&#xA;    &lt;li>&#xA;        the operation call approach: synchronous/ asynchronous, stateless/stateful, header based or carrying payload, use&#xA;        of faults or not&#xA;    &lt;/li>&#xA;    &lt;li>&#xA;        the exception reporting&#xA;    &lt;/li>&#xA;&lt;/ul>&#xA;&lt;p>&#xA;    The service implementation using a rule engine has to look at:&#xA;&lt;/p>&#xA;&lt;ul>&#xA;    &lt;li>&#xA;        the transaction propagation&#xA;    &lt;/li>&#xA;    &lt;li>&#xA;        the reference data caching&#xA;    &lt;/li>&#xA;    &lt;li>&#xA;        the parsing of input message: the claim data&#xA;    &lt;/li>&#xA;    &lt;li>&#xA;        the loading of the related data: the policy related to the claim, or the insured person profile&#xA;    &lt;/li>&#xA;    &lt;li>&#xA;        the preparation of the output message: the result and may be some other technical data&#xA;    &lt;/li>&#xA;&lt;/ul>" longPresentationName="integrate_bre,_6-p2EH_BEd2YWI_0AZcMOA"/>
