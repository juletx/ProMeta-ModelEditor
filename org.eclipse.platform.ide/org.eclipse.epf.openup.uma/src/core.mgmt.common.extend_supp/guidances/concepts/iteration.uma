<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="-vi8wxwxVZLY0SMPFxZjD7A" name="new_concept,_lam4ADkBEduxovfWMDsntw" guid="-vi8wxwxVZLY0SMPFxZjD7A" changeDate="2011-02-18T22:35:54.146+0100" version="7.2.0" mainDescription="&lt;h3>&#xD;&#xA;    What is an Iteration&#xD;&#xA;&lt;/h3>&#xD;&#xA;&lt;p>&#xD;&#xA;    An iteration is a set period of time within a project in which you produce a stable, executable version of the product,&#xD;&#xA;    together with any other supporting documentation, install scripts, or similar, necessary to use this release. The&#xD;&#xA;    executable is demonstrable, allowing the team to demonstrate true progress to stakeholders, get feedback on how they&#xD;&#xA;    are doing so that they can improve their understanding of what needs to be done, and how to do it. Each iteration&#xD;&#xA;    builds upon the results of previous iteration, and will produce a product increment one step closer to the final&#xD;&#xA;    product. Iterations are timeboxed, meaning the schedule for an iteration should be regarded as fixed, and the scope of&#xD;&#xA;    the iteration's content actively managed to meet that schedule.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    At each iteration, artifacts are updated. It is said that this is a bit like &quot;growing&quot; software. Instead of developing&#xD;&#xA;    artifacts one after another, in a pipeline fashion, they are evolving across the cycle, although at different rates.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Iterative development is very disciplined: the iteration length is fixed; the objectives of iterations are carefully&#xD;&#xA;    planned; the evaluation criteria are established when each iteration is planned; and the tasks and responsibilities of&#xD;&#xA;    participants are well defined. Additionally, objective measures of progress are captured. Some reworking takes place&#xD;&#xA;    from one iteration to the next, but this too is done in a structured fashion.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Each iteration should address the most critical risks, and implement the highest-priority work items. This ensures that&#xD;&#xA;    each iteration adds maximum stakeholder value, while reducing uncertainty. Iterative development is typically combined&#xD;&#xA;    with frequent or continuous integration: as unit-tested components become available, they are integrated, then a build&#xD;&#xA;    is produced and subjected to integration testing. In this way, the capability of the integrated software grows as the&#xD;&#xA;    iteration proceeds, towards the goals set when the iteration was planned. Regular builds, such as daily or more&#xD;&#xA;    frequent builds, let you break down the integration and test issues and spread them across the development cycle. These&#xD;&#xA;    issues have often been the downfall of large projects because all problems were discovered at once during the single&#xD;&#xA;    massive integration step, which occurred very late in the cycle, and where a single problem halts the whole team.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h3>&#xD;&#xA;    Why Iterate&#xD;&#xA;&lt;/h3>&#xD;&#xA;&lt;p>&#xD;&#xA;    The iterative approach has proven itself superior to the waterfall approach for a number of reasons:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        You are more likely to build an application that addresses user needs. Early specification of requirements often&#xD;&#xA;        leads to unused features. The Standish Group has researched thousands of application development projects and has&#xD;&#xA;        found that more than 45 percent of features are never used, while another 19 percent are used rarely&amp;nbsp; (see&#xD;&#xA;        Figure 2.3). In other words, typically more than half of the development effort is wasted on developing&#xD;&#xA;        nonessential capabilities. To avoid this problem, you need to involve the customer in the development project and&#xD;&#xA;        use an iterative approach that allows you to implement and validate the capabilities deemed most essential in each&#xD;&#xA;        iteration. This approach allows not only early validation of key capabilities but also addition of new capabilities&#xD;&#xA;        late in the project.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Integration is not one &quot;big bang&quot; at the end of a project. Leaving integration to the end results in time- and&#xD;&#xA;        budget-consuming rework. To avoid this, an iterative approach breaks a project down into smaller iterations, each&#xD;&#xA;        evolving executable code that is continuously integrated to enable rapid feedback and minimize later revision.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Risks are usually discovered or addressed during early iterations. With the iterative approach, risks are more&#xD;&#xA;        likely to be identified and addressed in early iterations. As an example, if there is a risk that a stakeholder&#xD;&#xA;        will not be happy with the functionality you are developing, iterative development will encourage you to&amp;nbsp;&#xD;&#xA;        implement the most essential capabilities partially and demonstrate them to key stakeholders to make sure that you&#xD;&#xA;        are on the right track.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Your ability to work effectively is fine-tuned. During early iterations, team members are walking through all&#xD;&#xA;        lifecycle activities, from requirements capture and test definition to development, implementation, and testing.&#xD;&#xA;        Consequently, they can make sure they have the tools, skills, organizational structure, and so on to work&#xD;&#xA;        effectively.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Management has a way of making tactical changes to the product. Management can make changes to the product along&#xD;&#xA;        the way-to compete with other new products, for example. Iterative development allows you to evolve partial&#xD;&#xA;        implementations of the end product quickly and use these for quick release of a reduced-scope product to counter a&#xD;&#xA;        competitor's move.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Reuse is facilitated. It is easier to identify common parts as they are being partially designed or implemented in&#xD;&#xA;        iterations than to recognize them at the beginning. Discussions and reviews of the design in early iterations allow&#xD;&#xA;        team members to spot potential opportunities for reuse and then develop a mature common code for these&#xD;&#xA;        opportunities in subsequent iterations.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Defects can be found and corrected over several iterations. This capability results in a robust architecture and a&#xD;&#xA;        high-quality application. Flaws are detected in early iterations, rather than during a massive testing phase at the&#xD;&#xA;        end. Performance bottlenecks are discovered while they can still be addressed instead of creating panic on the eve&#xD;&#xA;        of delivery.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Project personnel are better used. Many organizations match their use of a waterfall approach with a pipeline&#xD;&#xA;        organization: the analysts send the completed requirements to designers, who send a completed design to&#xD;&#xA;        programmers, who send components to integrators, who send a system to testers. These many handoffs are sources of&#xD;&#xA;        errors and misunderstandings and make people feel less responsible for the final product. An iterative process&#xD;&#xA;        encourages widening the scope of expertise of the team members, allowing them to play many roles and thus enabling&#xD;&#xA;        a project manager to make better use of the available staff and simultaneously remove problematic handoffs.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Team members learn along the way. The project members have several opportunities within a development cycle to&#xD;&#xA;        learn from their mistakes and improve their skills from one iteration to another. More training opportunities can&#xD;&#xA;        be discovered as a result of assessing the earlier iterations.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        The development process itself is improved and refined along the way. The iteration assessment allows the team to&#xD;&#xA;        not only look at the project status from a product or scheduling perspective but also analyze what can be improved&#xD;&#xA;        in the next iteration in both the organization and the process.&amp;nbsp;One technique for doing so is to hold a&#xD;&#xA;        retrospective.&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&lt;span class=&quot;E1&quot;>&lt;span&#xD;&#xA;style=&quot;FONT-SIZE: 12pt; FONT-FAMILY: 'Times New Roman'; mso-fareast-font-family: 'MS Mincho'; mso-ansi-language: EN-US; mso-fareast-language: JA; mso-bidi-language: AR-SA&quot;>&lt;strong>&lt;img&#xD;&#xA; height=&quot;307&quot; alt=&quot;45 percent of features implemented are never ever used&quot; src=&quot;./resources/iteration.gif&quot;&#xD;&#xA;width=&quot;489&quot; />&lt;/strong>&lt;/span>&lt;/span>&amp;nbsp; &#xD;&#xA;&lt;p>&#xD;&#xA;    &lt;strong>&lt;em>Figure 2.3. Most Features Implemented Are Never or Rarely Used.&lt;br />&#xD;&#xA;    &lt;/em>&lt;/strong>&lt;em>According to the Standish Group, an amazing 45 percent of features implemented are never used, while&#xD;&#xA;    another 19 percent are used only rarely. If features never used were not implemented in the first place, development&#xD;&#xA;    time would be cut in about half. Further, since productivity is typically measured in the form of lines of code or&#xD;&#xA;    functionality delivered, this improvement would not register as a productivity increase using standard productivity&#xD;&#xA;    measures.&lt;/em>&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h3>&#xD;&#xA;    Iteration Length&#xD;&#xA;&lt;/h3>&#xD;&#xA;&lt;p>&#xD;&#xA;    Iterations are typically 4 weeks long, although some teams will work with iterations as short as a week or as long as&#xD;&#xA;    six weeks. For factors driving iteration length, see Table 1.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    &lt;strong>&lt;em>Table 1. Factors Impacting Iteration Length.&lt;/em>&lt;/strong>&#xD;&#xA;&lt;/p>&lt;br />&#xD;&#xA;&lt;br />&#xD;&#xA;&lt;table style=&quot;WIDTH: 547px; HEIGHT: 356px&quot; cellspacing=&quot;2&quot; cellpadding=&quot;2&quot; width=&quot;547&quot; border=&quot;1&quot;>&#xD;&#xA;    &lt;tbody>&#xD;&#xA;        &lt;tr>&#xD;&#xA;            &lt;th scope=&quot;col&quot;>&#xD;&#xA;                Factors leading to reduced iteration length&amp;nbsp;&#xD;&#xA;            &lt;/th>&#xD;&#xA;            &lt;th scope=&quot;col&quot;>&#xD;&#xA;                Factors leading to increased iteration length&#xD;&#xA;            &lt;/th>&#xD;&#xA;        &lt;/tr>&#xD;&#xA;        &lt;tr>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Small teams&amp;nbsp;&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Large teams&#xD;&#xA;            &lt;/td>&#xD;&#xA;        &lt;/tr>&#xD;&#xA;        &lt;tr>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Co-located teams&amp;nbsp;&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Distributed teams&#xD;&#xA;            &lt;/td>&#xD;&#xA;        &lt;/tr>&#xD;&#xA;        &lt;tr>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Strong configuration management system&amp;nbsp;&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Poor configuration management system&#xD;&#xA;            &lt;/td>&#xD;&#xA;        &lt;/tr>&#xD;&#xA;        &lt;tr>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Dedicated, full-time resources&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Matrixed or part-time resources&#xD;&#xA;            &lt;/td>&#xD;&#xA;        &lt;/tr>&#xD;&#xA;        &lt;tr>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Automated testing&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Lack of automated testing&#xD;&#xA;            &lt;/td>&#xD;&#xA;        &lt;/tr>&#xD;&#xA;        &lt;tr>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Integrated tool environment&amp;nbsp;&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Absence of good automation and tool integration&#xD;&#xA;            &lt;/td>&#xD;&#xA;        &lt;/tr>&#xD;&#xA;        &lt;tr>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Team experienced with iterative development&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Team inexperienced with iterative development&#xD;&#xA;            &lt;/td>&#xD;&#xA;        &lt;/tr>&#xD;&#xA;        &lt;tr>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Fast decision making&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Policies and bureaucracy preventing fast decision making&#xD;&#xA;            &lt;/td>&#xD;&#xA;        &lt;/tr>&#xD;&#xA;        &lt;tr>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Unclear requirements&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Well-understood requirements&#xD;&#xA;            &lt;/td>&#xD;&#xA;        &lt;/tr>&#xD;&#xA;        &lt;tr>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Unclear or brittle architecture&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Well-defined and stable architecture&#xD;&#xA;            &lt;/td>&#xD;&#xA;        &lt;/tr>&#xD;&#xA;        &lt;tr>&#xD;&#xA;            &lt;td>&#xD;&#xA;                New and poorly understood technology&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;                Well-understood technology&#xD;&#xA;            &lt;/td>&#xD;&#xA;        &lt;/tr>&#xD;&#xA;    &lt;/tbody>&#xD;&#xA;&lt;/table>&lt;br />&#xD;&#xA;&lt;br />" longPresentationName="new_concept,_lam4ADkBEduxovfWMDsntw"/>
