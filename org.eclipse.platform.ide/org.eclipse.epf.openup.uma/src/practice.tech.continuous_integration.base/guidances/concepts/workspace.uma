<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="_Dfmk8MPiEdmbOvqy4O0adg" name="workspace,_0cEmAMlgEdmt3adZL5Dmdw" guid="_Dfmk8MPiEdmbOvqy4O0adg" changeDate="2006-09-21T09:22:51.000+0200" version="1.0.0" mainDescription="&lt;p align=&quot;left&quot;>&#xD;&#xA;    On small teams, shared workspaces may work fine, but you must coordinate activities between team members to avoid&#xD;&#xA;    conflicts.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p align=&quot;left&quot;>&#xD;&#xA;    A better approach is for each developer to have a reasonably private area for the development and testing of their work&#xD;&#xA;    products. This workspace should be insulated&amp;nbsp;so that destabilizing or conflicting changes made by others do not&#xD;&#xA;    interfere with&amp;nbsp;progress. However, it should&amp;nbsp;not be isolated to the extent that&amp;nbsp;the developer's work is&#xD;&#xA;    unavailable to the team.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p align=&quot;left&quot;>&#xD;&#xA;    In addition, insulated&amp;nbsp;workspaces can be created for each test phase, such as integration testing and system&#xD;&#xA;    testing. This approach to workspaces provides several benefits &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;&#xA;    href=&quot;./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html&quot;&#xD;&#xA;    guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>[WIB04]&lt;/a>:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;p>&#xD;&#xA;            Developers can develop, test, and debug software changes without being affected by others team&#xD;&#xA;            members'&amp;nbsp;changes until they are ready. When ready, developers can update their insulated environments to&#xD;&#xA;            test the latest changes from other developers.&#xD;&#xA;        &lt;/p>&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;p>&#xD;&#xA;            With separate workspaces for integration and system testing, a team could use a methodology that ensures&#xD;&#xA;            changes have passed integration testing before other developers get them, thereby minimizing the time spent&#xD;&#xA;            solving integration problems.&amp;nbsp; For example, if two team members check in incompatible changes without&#xD;&#xA;            realizing it, and both changes are immediately available to everyone on the team, all team members&amp;nbsp;might&#xD;&#xA;            waste time trying to resolve the broken build. Conversely, if both changes must pass integration testing before&#xD;&#xA;            being distributed to others, the problem could be found and fixed by one person with minimal disruption to the&#xD;&#xA;            team.&#xD;&#xA;        &lt;/p>&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;p>&#xD;&#xA;            By setting up an integration area to collect and build the latest changes, the team can integrate early and&#xD;&#xA;            often. That is a well-known best practice for reducing overall cost and time to deliver software projects.&#xD;&#xA;        &lt;/p>&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;p>&#xD;&#xA;            The system test area, which is used for preparing releases, is insulated from developers' ongoing changes and&#xD;&#xA;            contains only configurations that have passed integration testing. This lets you control the content of the&#xD;&#xA;            release while still enabling developers to continue working.&#xD;&#xA;        &lt;/p>&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>" longPresentationName="workspace,_0cEmAMlgEdmt3adZL5Dmdw"/>
