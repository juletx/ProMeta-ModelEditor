<?xml version="1.0" encoding="UTF-8"?><org.eclipse.epf.uma:ContentDescription xmlns:epf="http://www.eclipse.org/epf" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:xmi="http://www.omg.org/XMI" longPresentationName="new_concept,__O7tAMVvEduLYZUGfgZrkQ" xmi:version="2.0" epf:version="1.5.1" xmi:id="-UQ_e8kozIP11Xu008RJd-A" name="new_concept,__O7tAMVvEduLYZUGfgZrkQ" guid="-UQ_e8kozIP11Xu008RJd-A" changeDate="2008-10-15T15:28:05.000+0200" version="7.2.0">
  <mainDescription>&lt;h3&gt;&#xD;
    Introduction&#xD;
&lt;/h3&gt;&#xD;
&lt;p&gt;&#xD;
    Software architecture is a concept that is easy to understand, and that most engineers intuitively feel, especially&#xD;
    with a little experience, but it is hard to define precisely. In particular, it is difficult to draw a sharp line&#xD;
    between design and architecture-architecture is one aspect of design that concentrates on some specific features.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    In An Introduction to Software Architecture, David Garlan and Mary Shaw suggest that software architecture is a level&#xD;
    of design concerned with issues: "Beyond the algorithms and data structures of the computation; designing and&#xD;
    specifying the overall system structure emerges as a new kind of problem. Structural issues include gross organization&#xD;
    and global control structure; protocols for communication, synchronization, and data access; assignment of&#xD;
    functionality to design elements; physical distribution; composition of design elements; scaling and performance; and&#xD;
    selection among design alternatives." &lt;a class="elementlinkwithusertext"&#xD;
    href="./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html"&#xD;
    guid="_9ToeIB83Edqsvps02rpOOg"&gt;[GAR93]&lt;/a&gt;&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    But there is more to architecture than just structure; the IEEE Working Group on Architecture defines it as "the&#xD;
    highest-level concept of a system in its environment" &lt;a class="elementlinkwithusertext"&#xD;
    href="./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html"&#xD;
    guid="_9ToeIB83Edqsvps02rpOOg"&gt;[IEP1471]&lt;/a&gt;. It also encompasses the "fit" with system integrity, with economical&#xD;
    constraints, with aesthetic concerns, and with style. It is not limited to an inward focus, but takes into&#xD;
    consideration the system as a whole in its user environment and its development environment - an outward focus.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    The architecture focuses on specific aspects of the overall system design, concentrating on structure, essential&#xD;
    elements, key scenarios and those aspects that have a lasting impact on system qualities such as performance,&#xD;
    reliability, adaptability and cost. It also defines the set of &lt;a class="elementLink"&#xD;
    href="./../../../core.tech.common.extend_supp/guidances/concepts/arch_mechanism_2932DFB6.html"&#xD;
    guid="_mzxI0A4LEduibvKwrGxWxA"&gt;Architectural Mechanism&lt;/a&gt;s, &lt;a class="elementLink"&#xD;
    href="./../../../core.tech.common.extend_supp/guidances/concepts/pattern_10BE6D96.html"&#xD;
    guid="_0YJvUMlgEdmt3adZL5Dmdw"&gt;Pattern&lt;/a&gt;s and styles that will guide the rest of the design, assuring its integrity.&#xD;
&lt;/p&gt;&#xD;
&lt;h3&gt;&#xD;
    Purpose of Architecture&#xD;
&lt;/h3&gt;&#xD;
&lt;p&gt;&#xD;
    The architecture can be used for many things:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;strong&gt;To describe the essential structure of the system and the decisions guiding the structure of the&#xD;
        system&lt;/strong&gt; so the integrity and understandability of the system is assured.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;a id="Comment71_" name="Comment71_"&gt;&lt;strong&gt;To identify and attack risks to the system&lt;/strong&gt; (using the&#xD;
        architecture as an artifact of governance)&lt;/a&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;strong&gt;To provide context and guidance for developers&lt;/strong&gt; to construct the system by describing the&#xD;
        motivations behind the architectural decisions so those decisions can be robustly implemented. The architecture&#xD;
        services as the blueprint for development.&amp;nbsp;For example, the architect may place constraints on how data is&#xD;
        packaged and communicated between different parts of the system. This may appear to be a burden, but the&#xD;
        justification in the Architecture Notebook can explain that there is a significant performance bottleneck when&#xD;
        communicating with a legacy system. The rest of the system must adapt to this bottleneck by following a specific&#xD;
        data packaging scheme.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;strong&gt;To provide an overview of the system to whoever must maintain the architecture&lt;/strong&gt;, as well as an&#xD;
        understanding of the motivation behind the important technical decisions.&amp;nbsp; Team members who were not involved&#xD;
        in those architectural decisions need to understand the reasoning behind the&amp;nbsp;context of the architecture so&#xD;
        they can best address the needs of the system.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;strong&gt;To define the project structure and team organization.&lt;/strong&gt; Architectural elements make excellent units&#xD;
        of implementation, unit testing, integration, configuration management and&amp;nbsp;documentation.&amp;nbsp;&amp;nbsp; They can&#xD;
        also be used to define&amp;nbsp; so that managers can plan the project.&#xD;
    &lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;h3&gt;&#xD;
    Architecture Description&#xD;
&lt;/h3&gt;&#xD;
&lt;p&gt;&#xD;
    To speak and reason about software architecture, you must first define an architectural representation, a way of&#xD;
    describing important aspects of an architecture.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    The following is some information that is worth capturing as part of the software architecture:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
    &lt;li&gt;&#xD;
        Architectural goals (see &lt;a class="elementLinkWithType"&#xD;
        href="./../../../core.tech.common.extend_supp/guidances/concepts/arch_goals_CB41D8AE.html"&#xD;
        guid="_HlRqANpbEdyP58ppo1Ieaw"&gt;Concept: Architectural Goals&lt;/a&gt;)&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        References to architecturally significant requirements and how the architecture addresses those requirements,&#xD;
        including&amp;nbsp;key scenarios that describe critical behavior of the system (see &lt;a class="elementLinkWithType"&#xD;
        href="./../../../core.tech.common.extend_supp/guidances/concepts/arch_significant_requirements_1EE5D757.html"&#xD;
        guid="_HrZGIA4MEduibvKwrGxWxA"&gt;Concept: Architecturally Significant Requirements&lt;/a&gt;)&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Constraints on the architecture and how the architecture addresses those constraints (see &lt;a&#xD;
        class="elementLinkWithType"&#xD;
        href="./../../../core.tech.common.extend_supp/guidances/concepts/arch_constraints_AE56B662.html"&#xD;
        guid="_jdKSsNpiEdyP58ppo1Ieaw"&gt;Concept: Architectural Constraints&lt;/a&gt;)&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Key abstractions (see &lt;a class="elementLinkWithType"&#xD;
        href="./../../../core.tech.common.extend_supp/guidances/concepts/key_abstractions_1474DBF2.html"&#xD;
        guid="_pLEGUNqGEdy88NBoQgfGyg"&gt;Concept: Key Abstractions&lt;/a&gt;)&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;a class="elementLink"&#xD;
        href="./../../../core.tech.common.extend_supp/guidances/concepts/arch_mechanism_2932DFB6.html"&#xD;
        guid="_mzxI0A4LEduibvKwrGxWxA"&gt;Architectural Mechanism&lt;/a&gt; and where they should be applied (see &lt;a&#xD;
        class="elementLinkWithType"&#xD;
        href="./../../../core.tech.common.extend_supp/guidances/concepts/arch_mechanism_2932DFB6.html"&#xD;
        guid="_mzxI0A4LEduibvKwrGxWxA"&gt;Concept: Architectural Mechanism&lt;/a&gt;).&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Description of the partitioning approach, as well as a description of the key partitions.&amp;nbsp; For example,&#xD;
        Layering&amp;nbsp;(see &lt;a class="elementLinkWithType"&#xD;
        href="./../../../core.tech.common.extend_supp/guidances/guidelines/layering_F169CF07.html"&#xD;
        guid="_0gpkAMlgEdmt3adZL5Dmdw"&gt;Guideline: Layering&lt;/a&gt;)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Description of the deployment approach, as well as how key components are allocated to deployment&#xD;
        nodes.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        References to architecturally significant design elements (see &lt;a class="elementLinkWithType"&#xD;
        href="./../../../core.tech.common.extend_supp/guidances/concepts/component_CB167D48.html"&#xD;
        guid="_0YP18MlgEdmt3adZL5Dmdw"&gt;Concept: Component&lt;/a&gt;)&amp;nbsp;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Critical system interfaces (see &lt;a class="elementLinkWithType"&#xD;
        href="./../../../core.tech.common.extend_supp/guidances/guidelines/repres_interfaces_to_ext_systems_51A34F6E.html"&#xD;
        guid="_0gjdYMlgEdmt3adZL5Dmdw"&gt;Guideline: Representing Interfaces to External Systems&lt;/a&gt;)&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Assets that have been reused and/or assets that have been developed to be reused (for more information, see &lt;a&#xD;
        class="elementLinkWithType"&#xD;
        href="./../../../core.tech.common.extend_supp/guidances/guidelines/software_reuse_B6B04C26.html"&#xD;
        guid="_vO2uoO0OEduUpsu85bVhiQ"&gt;Guideline: Software Reuse&lt;/a&gt;)&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Guidance, decisions, and constraints the developers must follow in building the system, along with justification&#xD;
    &lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;p&gt;&#xD;
    The architecture can contain any information and references that are appropriate in communicating how developers should&#xD;
    build the system.&#xD;
&lt;/p&gt;&#xD;
&lt;h4&gt;&#xD;
    Architectural Representation&#xD;
&lt;/h4&gt;&#xD;
&lt;p&gt;&#xD;
    The architecture can be represented in many forms and from many viewpoints, depending on the needs of the project and&#xD;
    the preferences of the project team. It need not be a formal document. The essence of the architecture can often be&#xD;
    communicated through a series of simple diagrams on a whiteboard; or as a list of decisions. The illustration just&#xD;
    needs to show the nature of the proposed solution, convey the governing ideas, and represent the major building blocks&#xD;
    to make it easier to communicate the architecture to the project team and stakeholders.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    If a more complex system is required, then the architecture can be represented as a more comprehensive set&#xD;
    of&amp;nbsp;views that describe the architecture from a number of viewpoints. For more information, see &lt;a&#xD;
    class="elementLinkWithType"&#xD;
    href="./../../../core.tech.common.extend_supp/guidances/concepts/arch_views_viewpoints_7A6CD31.html"&#xD;
    guid="_kgtcoNc8Edyd7OybSySFxg"&gt;Concept: Architectural Views and Viewpoints&lt;/a&gt;.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    The architecture can be expressed as a simple metaphor or as a comparison to a predefined architectural style or set of&#xD;
    styles. It may be a precise set of models or documents that describe the various aspects of the system's key elements.&#xD;
    Expressing it as skeletal implementation is another option - although this may need to be baselined and preserved to&#xD;
    ensure that the essence of the system can be understood as the system grows. Choose the medium that best meets the&#xD;
    needs of the project.&#xD;
&lt;/p&gt;&#xD;
&lt;h3&gt;&#xD;
    Architectural Patterns&#xD;
&lt;/h3&gt;&#xD;
&lt;p&gt;&#xD;
    Architectural &lt;a class="elementLink"&#xD;
    href="./../../../core.tech.common.extend_supp/guidances/concepts/pattern_10BE6D96.html"&#xD;
    guid="_0YJvUMlgEdmt3adZL5Dmdw"&gt;Pattern&lt;/a&gt;s are ready-made forms that solve recurring architectural problems. An&#xD;
    architectural framework or an architectural infrastructure (middleware) is a set of components on which you can build a&#xD;
    certain kind of architecture. Many of the major architectural difficulties should be resolved in the framework or in&#xD;
    the infrastructure, usually targeted to a specific domain: command and control, MIS, control system, and so on.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    &lt;a class="elementlinkwithusertext"&#xD;
    href="./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html"&#xD;
    guid="_9ToeIB83Edqsvps02rpOOg"&gt;[BUS96]&lt;/a&gt; groups architectural patterns according to the characteristics of the&#xD;
    systems in which they are most applicable, with one category dealing with more general structuring issues. The table&#xD;
    shows the categories presented in &lt;a class="elementlinkwithusertext"&#xD;
    href="./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html"&#xD;
    guid="_9ToeIB83Edqsvps02rpOOg"&gt;[BUS96]&lt;/a&gt; and the patterns they contain.&#xD;
&lt;/p&gt;&#xD;
&lt;div align="center"&gt;&#xD;
    &lt;table&#xD;
    style="BORDER-RIGHT: rgb(128,128,128) 1px solid; BORDER-TOP: rgb(128,128,128) 1px solid; BORDER-LEFT: rgb(128,128,128) 1px solid; BORDER-BOTTOM: rgb(128,128,128) 1px solid"&#xD;
     cellspacing="0" bordercolordark="#808080" cellpadding="4" width="85%" bordercolorlight="#808080" border="1"&gt;&#xD;
        &lt;tbody&gt;&#xD;
            &lt;tr&gt;&#xD;
                &lt;th id="col1" width="50%"&gt;&#xD;
                    Category&#xD;
                &lt;/th&gt;&#xD;
                &lt;th id="col2" width="50%"&gt;&#xD;
                    Pattern&#xD;
                &lt;/th&gt;&#xD;
            &lt;/tr&gt;&#xD;
            &lt;tr&gt;&#xD;
                &lt;th id="row2" align="left" headers="col1" width="50%" rowspan="3"&gt;&#xD;
                    Structure&#xD;
                &lt;/th&gt;&#xD;
                &lt;td headers="row2 col2" width="50%"&gt;&#xD;
                    Layers&#xD;
                &lt;/td&gt;&#xD;
            &lt;/tr&gt;&#xD;
            &lt;tr&gt;&#xD;
                &lt;td headers="row2 col2" width="50%"&gt;&#xD;
                    Pipes and Filters&#xD;
                &lt;/td&gt;&#xD;
            &lt;/tr&gt;&#xD;
            &lt;tr&gt;&#xD;
                &lt;td headers="row2 col2" width="50%"&gt;&#xD;
                    Blackboard&#xD;
                &lt;/td&gt;&#xD;
            &lt;/tr&gt;&#xD;
            &lt;tr&gt;&#xD;
                &lt;th id="row3" align="left" headers="col1" width="50%"&gt;&#xD;
                    Distributed Systems&#xD;
                &lt;/th&gt;&#xD;
                &lt;td headers="row3 col2" width="50%"&gt;&#xD;
                    Broker&#xD;
                &lt;/td&gt;&#xD;
            &lt;/tr&gt;&#xD;
            &lt;tr&gt;&#xD;
                &lt;th id="row4" align="left" headers="col1" width="50%" rowspan="2"&gt;&#xD;
                    Interactive Systems&#xD;
                &lt;/th&gt;&#xD;
                &lt;td headers="row4 col2" width="50%"&gt;&#xD;
                    Model-View-Controller&#xD;
                &lt;/td&gt;&#xD;
            &lt;/tr&gt;&#xD;
            &lt;tr&gt;&#xD;
                &lt;td headers="row4 col2" width="50%"&gt;&#xD;
                    Presentation-Abstraction-Control&#xD;
                &lt;/td&gt;&#xD;
            &lt;/tr&gt;&#xD;
            &lt;tr&gt;&#xD;
                &lt;th id="row5" align="left" headers="col1" width="50%" rowspan="2"&gt;&#xD;
                    Adaptable Systems&#xD;
                &lt;/th&gt;&#xD;
                &lt;td headers="row5 col2" width="50%"&gt;&#xD;
                    Reflection&#xD;
                &lt;/td&gt;&#xD;
            &lt;/tr&gt;&#xD;
            &lt;tr&gt;&#xD;
                &lt;td headers="row5 col2" width="50%"&gt;&#xD;
                    Microkernel&#xD;
                &lt;/td&gt;&#xD;
            &lt;/tr&gt;&#xD;
        &lt;/tbody&gt;&#xD;
    &lt;/table&gt;&lt;br /&gt;&#xD;
&lt;/div&gt;&#xD;
&lt;p&gt;&#xD;
    Refer to &lt;a class="elementlinkwithusertext"&#xD;
    href="./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html"&#xD;
    guid="_9ToeIB83Edqsvps02rpOOg"&gt;[BUS96]&lt;/a&gt; for a complete description of these patterns.&#xD;
&lt;/p&gt;&#xD;
&lt;h3&gt;&#xD;
    &lt;a id="Architectural Style" name="Architectural Style"&gt;Architectural Style&lt;/a&gt;&#xD;
&lt;/h3&gt;&#xD;
&lt;p&gt;&#xD;
    A software architecture (or an architectural view) may have an attribute called &lt;b&gt;architectural style&lt;/b&gt;, which&#xD;
    reduces the set of possible forms to choose from, and imposes a certain degree of uniformity to the architecture. The&#xD;
    style may be defined by a set of patterns, or by the choice of specific components or connectors as the basic building&#xD;
    blocks.&#xD;
&lt;/p&gt;&#xD;
&lt;h3&gt;&#xD;
    Architectural Timing&#xD;
&lt;/h3&gt;&#xD;
&lt;p&gt;&#xD;
    Teams should expect to spend more time on architectural issues early in the project.&amp;nbsp; This allows the team to&#xD;
    reduce risk associated to technology early in the project, hence allowing the team to more rapidly reduce the variance&#xD;
    in their estimate on what they can deliver at what time. Examples of architectural issues that needs to be resolved&#xD;
    early on include the following:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
    &lt;li&gt;&#xD;
        Component and their major interfaces.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Major technology choices (platform, languages, architecture frameworks / reference architectures, etc.).&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Interfaces to external systems.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Common services (persistence mechanisms, logging mechanisms, garbage collection, etc.).&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Key patterns.&#xD;
    &lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;h3&gt;&#xD;
    Validating the Architecture&#xD;
&lt;/h3&gt;&#xD;
&lt;p&gt;&#xD;
    The best way to validate the architecture is to actually implement it.&amp;nbsp; For more information, see &lt;a&#xD;
    class="elementLink" href="./../../../core.tech.common.extend_supp/guidances/concepts/executable_arch_D4E68CBD.html"&#xD;
    guid="_O1kAANvfEduv2KOT-Teh6w"&gt;Executable Architecture&lt;/a&gt;.&#xD;
&lt;/p&gt;</mainDescription>
</org.eclipse.epf.uma:ContentDescription>