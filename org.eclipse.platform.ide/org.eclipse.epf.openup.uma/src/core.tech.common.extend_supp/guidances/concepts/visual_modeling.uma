<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="_SB1n8MM1EdmSIPI87WLu3g" name="visual_modeling,_0XY6UMlgEdmt3adZL5Dmdw" guid="_SB1n8MM1EdmSIPI87WLu3g" changeDate="2008-02-14T13:58:00.000+0100" version="1.0.0" mainDescription="&lt;p align=&quot;center&quot;>&#xD;&#xA;    &lt;img height=&quot;229&quot; alt=&quot;visual modeling&quot; src=&quot;resources/visual.gif&quot; width=&quot;447&quot; />&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p align=&quot;center&quot;>&#xD;&#xA;    Visual modeling raises the level of abstraction&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Visual modeling is the use of semantically rich, graphical and textual design notations to capture software designs. A&#xD;&#xA;    notation, such as UML, allows the level of abstraction to be raised, while maintaining rigorous syntax and semantics.&#xD;&#xA;    In this way, it improves communication in the design team, as the design is formed and reviewed, allowing the reader to&#xD;&#xA;    reason about the design, and it provides an unambiguous basis for implementation.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h3>&#xD;&#xA;    How visual models help&#xD;&#xA;&lt;/h3>&#xD;&#xA;&lt;p>&#xD;&#xA;    A model is a simplified view of a system. It shows the essentials of the system from a particular perspective and hides&#xD;&#xA;    the nonessential details. Visual models help you:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Increase understanding of complex systems&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Explore and compare design alternatives at a low cost&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Form a foundation for implementation&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Capture requirements precisely&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Communicate decisions unambiguously&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Increase understanding of complex systems&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    The importance of models increases as systems become more complex. For example, you can build a doghouse without&#xD;&#xA;    blueprints. However, as you progress to building houses and then to skyscrapers, your need for blueprints becomes&#xD;&#xA;    pronounced.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Similarly, a small application built by one person in a few days may be easily understood in its entirety. However, an&#xD;&#xA;    e&amp;nbsp;-&amp;nbsp;commerce system with tens of thousands of source lines of code (SLOCs) or an air traffic control system&#xD;&#xA;    with hundreds of thousands of SLOCs can no longer be easily understood by one person. Constructing models allows a&#xD;&#xA;    developer to focus on the big picture, understand how components interact, and identify fatal flaws.&amp;nbsp;&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Among the various types of models are these examples:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Use cases to specify behavior unambiguously&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Class diagrams and data model diagrams to capture design&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        State transition diagrams to model dynamic behavior&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;p>&#xD;&#xA;    Modeling is important because it helps the team visualize, construct, and document the structure and behavior of the&#xD;&#xA;    system without getting lost in complexity.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Explore and compare design alternatives at a low cost&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    You can create and modify simple models inexpensively to explore design alternatives. Innovative ideas can be captured&#xD;&#xA;    and reviewed by other developers before investing in costly code development. When coupled with iterative development,&#xD;&#xA;    visual modeling helps developers assess design changes and communicate these changes to the entire development team.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Form a foundation for implementation&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    Today, many projects employ object-oriented programming languages to build reusable, change-tolerant, and stable&#xD;&#xA;    systems. To get these benefits, it is even more important to use object technology in design.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    The creation of visual models, whether&amp;nbsp;on paper; around a whiteboard; or in a modeling tool,&amp;nbsp;can help a team&#xD;&#xA;    to gain agreement on key aspects of the system before investing time&amp;nbsp;in proving&amp;nbsp;their ideas&amp;nbsp;with code.&#xD;&#xA;    Having a shared model of the system promotes collaboration within the team, encouraging everyone to work towards the&#xD;&#xA;    same goal.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    With the support of appropriate tools, you can use a design model to generate an initial code for implementation. This&#xD;&#xA;    is referred to as &lt;strong>forward engineering&lt;/strong> or &lt;strong>code generation&lt;/strong>. You can also enhance design&#xD;&#xA;    models to include enough information to build the system.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    &lt;strong>Reverse engineering&lt;/strong> may also be applied to generate design models from existing implementations. You&#xD;&#xA;    can use this method to evaluate existing implementations.&amp;nbsp;&amp;nbsp;&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    &lt;strong>Round-trip engineering&lt;/strong> combines both forward and reverse engineering techniques to ensure consistent&#xD;&#xA;    design and code. Combined with an iterative process and the right tools, round-trip engineering allows you to&#xD;&#xA;    synchronize the design and code during each iteration.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Capture requirements precisely&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    Before building a system, it's critical to capture the requirements. Specifying the requirements using a precise and&#xD;&#xA;    unambiguous model helps to ensure that all stakeholders can understand and agree on the requirements.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    A model that separates the external behavior of the system from the implementation of it helps you focus on the&#xD;&#xA;    intended use of the system, without getting bogged down in implementation details.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Communicate decisions unambiguously&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    The Unified Modeling Language (UML) is&amp;nbsp;a consistent notation that can be applied for system engineering, as well&#xD;&#xA;    as for business engineering. According to these excerpts from the UML specification, a standard notation::&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;p>&#xD;&#xA;            Serves as a language for communicating decisions that are not obvious or cannot be inferred from the code&#xD;&#xA;            itself.&#xD;&#xA;        &lt;/p>&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;p>&#xD;&#xA;            Provides semantics that are rich enough to capture all important strategic and tactical decisions.&#xD;&#xA;        &lt;/p>&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;p>&#xD;&#xA;            Offers a form concrete enough for humans to reason [about] and for tools to manipulate.&#xD;&#xA;        &lt;/p>&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;p>&#xD;&#xA;    UML represents the convergence of the best practice in software modeling throughout the object-technology industry. For&#xD;&#xA;    more information on the UML, see &lt;a class=&quot;elementLinkWithUserText&quot;&#xD;&#xA;    href=&quot;./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html&quot;&#xD;&#xA;    guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>[UML05]&lt;/a>.&#xD;&#xA;&lt;/p>" longPresentationName="visual_modeling,_0XY6UMlgEdmt3adZL5Dmdw"/>
