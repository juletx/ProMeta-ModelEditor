<?xml version="1.0" encoding="UTF-8"?><org.eclipse.epf.uma:ContentDescription xmlns:epf="http://www.eclipse.org/epf" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:xmi="http://www.omg.org/XMI" xmi:version="2.0" epf:version="1.5.1" xmi:id="_SB1n8MM1EdmSIPI87WLu3g" name="visual_modeling,_0XY6UMlgEdmt3adZL5Dmdw" guid="_SB1n8MM1EdmSIPI87WLu3g" changeDate="2008-02-14T13:58:00.000+0100" version="1.0.0">
  <mainDescription>&lt;p align="center"&gt;&#xD;
    &lt;img height="229" alt="visual modeling" src="resources/visual.gif" width="447" /&gt;&#xD;
&lt;/p&gt;&#xD;
&lt;p align="center"&gt;&#xD;
    Visual modeling raises the level of abstraction&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    Visual modeling is the use of semantically rich, graphical and textual design notations to capture software designs. A&#xD;
    notation, such as UML, allows the level of abstraction to be raised, while maintaining rigorous syntax and semantics.&#xD;
    In this way, it improves communication in the design team, as the design is formed and reviewed, allowing the reader to&#xD;
    reason about the design, and it provides an unambiguous basis for implementation.&#xD;
&lt;/p&gt;&#xD;
&lt;h3&gt;&#xD;
    How visual models help&#xD;
&lt;/h3&gt;&#xD;
&lt;p&gt;&#xD;
    A model is a simplified view of a system. It shows the essentials of the system from a particular perspective and hides&#xD;
    the nonessential details. Visual models help you:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
    &lt;li&gt;&#xD;
        Increase understanding of complex systems&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Explore and compare design alternatives at a low cost&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Form a foundation for implementation&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Capture requirements precisely&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Communicate decisions unambiguously&#xD;
    &lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;h4&gt;&#xD;
    Increase understanding of complex systems&#xD;
&lt;/h4&gt;&#xD;
&lt;p&gt;&#xD;
    The importance of models increases as systems become more complex. For example, you can build a doghouse without&#xD;
    blueprints. However, as you progress to building houses and then to skyscrapers, your need for blueprints becomes&#xD;
    pronounced.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    Similarly, a small application built by one person in a few days may be easily understood in its entirety. However, an&#xD;
    e&amp;nbsp;-&amp;nbsp;commerce system with tens of thousands of source lines of code (SLOCs) or an air traffic control system&#xD;
    with hundreds of thousands of SLOCs can no longer be easily understood by one person. Constructing models allows a&#xD;
    developer to focus on the big picture, understand how components interact, and identify fatal flaws.&amp;nbsp;&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    Among the various types of models are these examples:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
    &lt;li&gt;&#xD;
        Use cases to specify behavior unambiguously&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Class diagrams and data model diagrams to capture design&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        State transition diagrams to model dynamic behavior&#xD;
    &lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;p&gt;&#xD;
    Modeling is important because it helps the team visualize, construct, and document the structure and behavior of the&#xD;
    system without getting lost in complexity.&#xD;
&lt;/p&gt;&#xD;
&lt;h4&gt;&#xD;
    Explore and compare design alternatives at a low cost&#xD;
&lt;/h4&gt;&#xD;
&lt;p&gt;&#xD;
    You can create and modify simple models inexpensively to explore design alternatives. Innovative ideas can be captured&#xD;
    and reviewed by other developers before investing in costly code development. When coupled with iterative development,&#xD;
    visual modeling helps developers assess design changes and communicate these changes to the entire development team.&#xD;
&lt;/p&gt;&#xD;
&lt;h4&gt;&#xD;
    Form a foundation for implementation&#xD;
&lt;/h4&gt;&#xD;
&lt;p&gt;&#xD;
    Today, many projects employ object-oriented programming languages to build reusable, change-tolerant, and stable&#xD;
    systems. To get these benefits, it is even more important to use object technology in design.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    The creation of visual models, whether&amp;nbsp;on paper; around a whiteboard; or in a modeling tool,&amp;nbsp;can help a team&#xD;
    to gain agreement on key aspects of the system before investing time&amp;nbsp;in proving&amp;nbsp;their ideas&amp;nbsp;with code.&#xD;
    Having a shared model of the system promotes collaboration within the team, encouraging everyone to work towards the&#xD;
    same goal.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    With the support of appropriate tools, you can use a design model to generate an initial code for implementation. This&#xD;
    is referred to as &lt;strong&gt;forward engineering&lt;/strong&gt; or &lt;strong&gt;code generation&lt;/strong&gt;. You can also enhance design&#xD;
    models to include enough information to build the system.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    &lt;strong&gt;Reverse engineering&lt;/strong&gt; may also be applied to generate design models from existing implementations. You&#xD;
    can use this method to evaluate existing implementations.&amp;nbsp;&amp;nbsp;&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    &lt;strong&gt;Round-trip engineering&lt;/strong&gt; combines both forward and reverse engineering techniques to ensure consistent&#xD;
    design and code. Combined with an iterative process and the right tools, round-trip engineering allows you to&#xD;
    synchronize the design and code during each iteration.&#xD;
&lt;/p&gt;&#xD;
&lt;h4&gt;&#xD;
    Capture requirements precisely&#xD;
&lt;/h4&gt;&#xD;
&lt;p&gt;&#xD;
    Before building a system, it's critical to capture the requirements. Specifying the requirements using a precise and&#xD;
    unambiguous model helps to ensure that all stakeholders can understand and agree on the requirements.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    A model that separates the external behavior of the system from the implementation of it helps you focus on the&#xD;
    intended use of the system, without getting bogged down in implementation details.&#xD;
&lt;/p&gt;&#xD;
&lt;h4&gt;&#xD;
    Communicate decisions unambiguously&#xD;
&lt;/h4&gt;&#xD;
&lt;p&gt;&#xD;
    The Unified Modeling Language (UML) is&amp;nbsp;a consistent notation that can be applied for system engineering, as well&#xD;
    as for business engineering. According to these excerpts from the UML specification, a standard notation::&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            Serves as a language for communicating decisions that are not obvious or cannot be inferred from the code&#xD;
            itself.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            Provides semantics that are rich enough to capture all important strategic and tactical decisions.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            Offers a form concrete enough for humans to reason [about] and for tools to manipulate.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;p&gt;&#xD;
    UML represents the convergence of the best practice in software modeling throughout the object-technology industry. For&#xD;
    more information on the UML, see &lt;a class="elementLinkWithUserText"&#xD;
    href="./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html"&#xD;
    guid="_9ToeIB83Edqsvps02rpOOg"&gt;[UML05]&lt;/a&gt;.&#xD;
&lt;/p&gt;</mainDescription>
</org.eclipse.epf.uma:ContentDescription>