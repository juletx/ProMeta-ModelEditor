<?xml version="1.0" encoding="UTF-8"?><org.eclipse.epf.uma:ContentDescription xmlns:epf="http://www.eclipse.org/epf" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:xmi="http://www.omg.org/XMI" longPresentationName="patterns,_0YJvUMlgEdmt3adZL5Dmdw" xmi:version="2.0" epf:version="1.5.1" xmi:id="_QvmkAMM1EdmSIPI87WLu3g" name="patterns,_0YJvUMlgEdmt3adZL5Dmdw" guid="_QvmkAMM1EdmSIPI87WLu3g" changeDate="2008-09-03T14:26:48.000+0200" version="1.0.0">
  <mainDescription>&lt;h4&gt;&#xD;
    Origins&#xD;
&lt;/h4&gt;&#xD;
&lt;p&gt;&#xD;
    The idea of patterns as it is now applied to software design comes from the work of Christopher Alexander. He has&#xD;
    written widely on the subject of applying patterns to the design and construction of towns and buildings. Two of his&#xD;
    books, &lt;em&gt;A Pattern Language&lt;/em&gt; [&lt;a class="elementLinkWithUserText"&#xD;
    href="./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html"&#xD;
    guid="_9ToeIB83Edqsvps02rpOOg"&gt;ALE77&lt;/a&gt;] and &lt;em&gt;The Timeless Way of Building&lt;/em&gt; [&lt;a class="elementLinkWithUserText"&#xD;
    href="./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html"&#xD;
    guid="_9ToeIB83Edqsvps02rpOOg"&gt;ALE79&lt;/a&gt;] have had the greatest impact on the software community and the adoption of&#xD;
    software patterns for the design of software. His concepts of patterns and pattern language provide a model for the&#xD;
    capture of software design expertise in a form that can then be reapplied in recurring situations.&amp;nbsp;&#xD;
&lt;/p&gt;&#xD;
&lt;h4&gt;&#xD;
    A definition of patterns&#xD;
&lt;/h4&gt;&#xD;
&lt;p&gt;&#xD;
    Today, the most commonly used definition of software patterns is from [&lt;a class="elementLinkWithUserText"&#xD;
    href="./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html"&#xD;
    guid="_9ToeIB83Edqsvps02rpOOg"&gt;GAM95&lt;/a&gt;]:&#xD;
&lt;/p&gt;&#xD;
&lt;blockquote&gt;&#xD;
    &lt;p&gt;&#xD;
        "A design pattern describes the problem, a solution to the problem consisting of a general arrangement of objects&#xD;
        and classes, when to apply the solution, and the consequences of applying the solution."&#xD;
    &lt;/p&gt;&#xD;
&lt;/blockquote&gt;&#xD;
&lt;p&gt;&#xD;
    This definition often serves only as a starting point, however. A richer definition, based on Alexander's work, is&#xD;
    offered by Gabriel in his book, &lt;em&gt;A Timeless Way of Hacking&lt;/em&gt; [&lt;a class="elementLinkWithUserText"&#xD;
    href="./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html"&#xD;
    guid="_9ToeIB83Edqsvps02rpOOg"&gt;ALU03&lt;/a&gt;], in which each pattern is a three-part rule that expresses relationships&#xD;
    among a certain context, a certain system of forces that occur repeatedly in that context, and a certain software&#xD;
    configuration that allows these forces to resolve themselves.&#xD;
&lt;/p&gt;&#xD;
&lt;h4&gt;&#xD;
    Describing patterns&#xD;
&lt;/h4&gt;&#xD;
&lt;p&gt;&#xD;
    It is commonplace to describe patterns&amp;nbsp;using the&amp;nbsp;format made popular by Erich Gamma and his three colleagues&#xD;
    [&lt;a class="elementLinkWithUserText"&#xD;
    href="./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html"&#xD;
    guid="_9ToeIB83Edqsvps02rpOOg"&gt;GAM95&lt;/a&gt;]. They have come to be known as the Gang of Four (GoF); therefore, their&#xD;
    description is known as the &lt;strong&gt;GoF format&lt;/strong&gt;. The GoF format uses the following keywords to describe&#xD;
    object-oriented design patterns:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            &lt;strong&gt;Pattern name and classification:&lt;/strong&gt; Naming the pattern allows design to work at a higher level of&#xD;
            abstraction, using a vocabulary of patterns. Gamma says that finding a good name is one of the hardest problems&#xD;
            of developing a catalogue of patterns (see &lt;strong&gt;Pattern catalogues&lt;/strong&gt; later in this section).&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            &lt;strong&gt;Intent:&lt;/strong&gt; An answer to questions such as: What does the pattern do? What problem does it&#xD;
            address?&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            &lt;strong&gt;Also known as:&lt;/strong&gt; Other names for the pattern.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            &lt;strong&gt;Motivation:&lt;/strong&gt; A concrete scenario that illustrates a design problem and how the pattern solves&#xD;
            the problem.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            &lt;strong&gt;Applicability:&lt;/strong&gt; Instructions for how you can recognize situations in which patterns are&#xD;
            applicable.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            &lt;strong&gt;Structure:&lt;/strong&gt; A graphical representation of the classes in the pattern.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            &lt;strong&gt;Participants:&lt;/strong&gt; The responsibilities of the classes and objects that participate in the pattern.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            &lt;strong&gt;Collaborations:&lt;/strong&gt; How participants collaborate to fulfill their responsibilities.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            &lt;strong&gt;Consequences:&lt;/strong&gt; The results, side effects and trade offs caused by using the pattern.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            &lt;strong&gt;Implementation:&lt;/strong&gt; Guidance on the implementation of the pattern.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            &lt;strong&gt;Sample code:&lt;/strong&gt; Code fragments that illustrate the pattern's implementation.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            &lt;strong&gt;Known uses:&lt;/strong&gt; Where to find real-world examples of the pattern.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            &lt;strong&gt;Related patterns:&lt;/strong&gt; Synergies, differences, and other pattern relationships.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;p&gt;&#xD;
    Although the GoF format is specifically intended for object-oriented development, you can use it, with slight&#xD;
    modification, to address other software patterns. A more general keyword format for software patterns based on&#xD;
    Alexander's principles uses keywords such as &lt;em&gt;problem&lt;/em&gt;, &lt;em&gt;context&lt;/em&gt;, &lt;em&gt;forces&lt;/em&gt; and &lt;em&gt;solution&lt;/em&gt;.&#xD;
&lt;/p&gt;&#xD;
&lt;h4&gt;&#xD;
    Pattern catalogs&#xD;
&lt;/h4&gt;&#xD;
&lt;p&gt;&#xD;
    To assist with the identification and selection of patterns, various classification schemes have been proposed. One of&#xD;
    the early schemes, proposed by Buschmann and his associates, [&lt;a class="elementLinkWithUserText"&#xD;
    href="./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html"&#xD;
    guid="_9ToeIB83Edqsvps02rpOOg"&gt;BUS96&lt;/a&gt;] uses three classifiers: granularity, functionality, and structured&#xD;
    principles. Of those three classifiers, it is their granularity classifier that has remained popular. Granularity&#xD;
    classifies patterns into three levels of abstraction:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            &lt;strong&gt;Architectural patterns:&lt;/strong&gt; Architectural patterns express the fundamental structure of a software&#xD;
            scheme. Examples of architectural pattern include: layers, pipes and filters, and the model view controller&#xD;
            pattern.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            &lt;strong&gt;Design patterns:&lt;/strong&gt; Software architecture usually consists of smaller architectural units that&#xD;
            are described by design patterns. The GoF pattern is an example of a design pattern.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;p&gt;&#xD;
            &lt;strong&gt;Idioms.&lt;/strong&gt; An idiom is the lowest-level pattern, and it is specific to a programming language.&#xD;
        &lt;/p&gt;&#xD;
    &lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;p&gt;&#xD;
    Buschmann and his colleagues introduced four groups for categorizing architectural patterns:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
    &lt;li&gt;&#xD;
        Structure&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Distributed systems&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Interactive systems&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Adaptable systems&#xD;
    &lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;p&gt;&#xD;
    The following table shows the categorization of their architectural patterns.&#xD;
&lt;/p&gt;&#xD;
&lt;table cellspacing="0" cellpadding="2" width="85%" summary="Categories for Architectural Patterns [BUS96]" border="1"&#xD;
valign="top"&gt;&#xD;
    &lt;caption&gt;&#xD;
        &lt;strong&gt;Categories for Architectural Patterns&lt;br /&gt;&#xD;
        &lt;/strong&gt;&#xD;
    &lt;/caption&gt;&#xD;
    &lt;tbody&gt;&#xD;
        &lt;tr&gt;&#xD;
            &lt;th scope="col"&gt;&#xD;
                &lt;div align="center"&gt;&#xD;
                    &lt;strong&gt;Category&lt;/strong&gt;&#xD;
                &lt;/div&gt;&#xD;
            &lt;/th&gt;&#xD;
            &lt;th scope="col"&gt;&#xD;
                &lt;div align="center"&gt;&#xD;
                    &lt;strong&gt;Pattern&lt;/strong&gt;&#xD;
                &lt;/div&gt;&#xD;
            &lt;/th&gt;&#xD;
        &lt;/tr&gt;&#xD;
        &lt;tr&gt;&#xD;
            &lt;td&gt;&#xD;
                Structure&#xD;
            &lt;/td&gt;&#xD;
            &lt;td&gt;&#xD;
                &lt;p&gt;&#xD;
                    Layers&lt;br /&gt;&#xD;
                    Pipes and filters&lt;br /&gt;&#xD;
                    Blackboard&#xD;
                &lt;/p&gt;&#xD;
            &lt;/td&gt;&#xD;
        &lt;/tr&gt;&#xD;
        &lt;tr&gt;&#xD;
            &lt;td&gt;&#xD;
                Distributed systems&#xD;
            &lt;/td&gt;&#xD;
            &lt;td&gt;&#xD;
                Broker&#xD;
            &lt;/td&gt;&#xD;
        &lt;/tr&gt;&#xD;
        &lt;tr&gt;&#xD;
            &lt;td&gt;&#xD;
                Interactive systems&#xD;
            &lt;/td&gt;&#xD;
            &lt;td&gt;&#xD;
                Model view controller&lt;br /&gt;&#xD;
                Presentation abstraction control&#xD;
            &lt;/td&gt;&#xD;
        &lt;/tr&gt;&#xD;
        &lt;tr&gt;&#xD;
            &lt;td&gt;&#xD;
                &lt;p&gt;&#xD;
                    Adaptable systems&#xD;
                &lt;/p&gt;&#xD;
            &lt;/td&gt;&#xD;
            &lt;td&gt;&#xD;
                &lt;p&gt;&#xD;
                    Reflection&lt;br /&gt;&#xD;
                    Micro kernel&#xD;
                &lt;/p&gt;&#xD;
            &lt;/td&gt;&#xD;
        &lt;/tr&gt;&#xD;
    &lt;/tbody&gt;&#xD;
&lt;/table&gt;&#xD;
&lt;p&gt;&#xD;
    For design patterns, Gamma's group categorized their design patterns by purpose, using three categories:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
    &lt;li&gt;&#xD;
        Creational&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Structural&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Behavioral&#xD;
    &lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;h4&gt;&#xD;
    Pattern languages&#xD;
&lt;/h4&gt;&#xD;
&lt;p&gt;&#xD;
    In addition to the concept of patterns, Alexander also gave the software community the concept of a pattern language.&#xD;
    The purpose of developing a pattern language was to provide a vocabulary of design principles (patterns) that would&#xD;
    allow those who work, study, or live in buildings to communicate effectively with the planners and designers of those&#xD;
    buildings. Alexander explains that when using a pattern language:&#xD;
&lt;/p&gt;&#xD;
&lt;blockquote&gt;&#xD;
    &lt;p&gt;&#xD;
        We always use it as a sequence, going through the patterns, moving always from the larger patterns to the smaller,&#xD;
        always from the ones that create structure to the ones which then embellish those structures, and then to those&#xD;
        that embellish the embellishments.&#xD;
    &lt;/p&gt;&#xD;
&lt;/blockquote&gt;&#xD;
&lt;p&gt;&#xD;
    In applying patterns in this way, Alexander advocated the use of generative pattern languages, ones that, given an&#xD;
    initial context, would always lead to good design.&amp;nbsp; Alexander&amp;nbsp;states:&#xD;
&lt;/p&gt;&#xD;
&lt;blockquote&gt;&#xD;
    &lt;p&gt;&#xD;
        Thus, as in the case of natural languages, the pattern language is generative. It not only tells us the rules of&#xD;
        arrangement, but shows us how to construct arrangements - as many as we want - which satisfies the rules.&#xD;
    &lt;/p&gt;&#xD;
&lt;/blockquote&gt;&#xD;
&lt;p&gt;&#xD;
    In the application of software patterns, pattern names provide a vocabulary for the communication of software ideas.&#xD;
    The sequential application of patterns finds application in software design processes, both waterfall and iterative,&#xD;
    that successively apply architectural patterns, and then design patterns, and, finally, idioms to design and implement&#xD;
    a software system. Software processes, however, rely on the skills of the Architect and Developer roles to guide the&#xD;
    application of patterns, rather than a generative pattern language.&#xD;
&lt;/p&gt;</mainDescription>
</org.eclipse.epf.uma:ContentDescription>