<?xml version="1.0" encoding="UTF-8"?><org.eclipse.epf.uma:ContentDescription xmlns:epf="http://www.eclipse.org/epf" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:xmi="http://www.omg.org/XMI" longPresentationName="refactoring,_Poc7IPDzEdqYgerqi84oCA" xmi:version="2.0" epf:version="1.5.1" xmi:id="-fj_9xjbrpaYNSETyCz5yJg" name="refactoring,_Poc7IPDzEdqYgerqi84oCA" guid="-fj_9xjbrpaYNSETyCz5yJg" changeDate="2008-01-16T14:54:37.000+0100" version="1.0.0">
  <mainDescription>&lt;p&gt;&#xD;
    Refactoring is a disciplined way to restructure code when small changes are made to the code to improve its design. An&#xD;
    important aspect of a refactoring is that it improves the design while not changing the behavior of the design; a&#xD;
    refactoring neither adds nor removes functionality.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    Refactoring enables you to evolve the code slowly over time, to take an iterative and incremental approach to&#xD;
    implementation.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    These are the types of refactoring:&#xD;
&lt;/p&gt;&#xD;
&lt;ol&gt;&#xD;
    &lt;li&gt;&#xD;
        Code refactoring. Often referred to simply as refactoring, this is the refactoring of programming source code.&#xD;
        Examples of code refactorings include Rename Method, Encapsulate Field, Extract Class, Introduce Assertion, and&#xD;
        Pushdown Method.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Database refactoring. A database refactoring is a simple change to a database schema that improves its design while&#xD;
        retaining both its behavioral and informational semantics. Examples of database refactorings include Rename Column,&#xD;
        Split Table, Move Method to Database, Replace LOB with Table, Introduce Column Constraint, and Use Official Data&#xD;
        Source.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        User interface (UI) refactoring. A UI refactoring is a simple change to the UI which retains its semantics.&#xD;
        Examples of UI refactorings include Align Entry Fields, Apply Common Button Size, Apply Common Font, Indicate&#xD;
        Format, Reword in Active Voice, and Increase Color Contrast.&#xD;
    &lt;/li&gt;&#xD;
&lt;/ol&gt;&#xD;
&lt;p&gt;&#xD;
    Martin Fowler [&lt;a class="elementLinkWithUserText"&#xD;
    href="./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html#FOW99"&#xD;
    guid="_9ToeIB83Edqsvps02rpOOg"&gt;FOW99&lt;/a&gt;] identifies four key reasons to refactor:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
    &lt;li&gt;&#xD;
        Refactoring improves the design of software.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Refactoring makes software easier to understand.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Refactoring helps you find bugs.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        Refactoring helps you program faster.&#xD;
    &lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;p&gt;&#xD;
    Refactoring can improve the design of existing code, but it does not take the place of considering the design before&#xD;
    writing code. Refactoring instead changes the role of up-front design, allowing the strictly design work to be more&#xD;
    abstract. Small-scale, very tactical decisions can be made during the implementation of the solution with confidence&#xD;
    that refactoring will ensure a quality implementation at that level. The designing of the solution before&#xD;
    implementation will be more lightweight and focused on broad factors that will drive the implementation.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    There is an additional benefit of refactoring: it changes the way a developer thinks about the implementation when not&#xD;
    refactoring. The basic task of implementing a solution becomes solely about getting the solution to pass its developer&#xD;
    tests in the simplest way possible. Then the design of that solution can be examined and refactored separately. Even if&#xD;
    these two things -- implementation of the solution and then improvement -- are just a minute apart, it can be freeing&#xD;
    for a developer to single-mindedly create code that causes a test to pass, and then separately single-mindedly improve&#xD;
    that code.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    These are some additional resources:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;a href="http://www.refactoring.com/" target="_blank"&gt;&lt;u&gt;&lt;font&#xD;
        color="#0000ff"&gt;http://www.refactoring.com/&lt;/font&gt;&lt;/u&gt;&lt;/a&gt;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;a href="http://www.agiledata.org/essays/databaseRefactoring.html"&gt;&lt;u&gt;&lt;font&#xD;
        color="#0000ff"&gt;http://www.agiledata.org/essays/databaseRefactoring.html&lt;/font&gt;&lt;/u&gt;&lt;/a&gt;&#xD;
    &lt;/li&gt;&#xD;
&lt;/ul&gt;</mainDescription>
</org.eclipse.epf.uma:ContentDescription>