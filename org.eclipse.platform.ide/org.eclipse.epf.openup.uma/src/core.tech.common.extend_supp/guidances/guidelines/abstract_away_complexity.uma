<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="-X7QSjItNBz7w8603yBCv0Q" name="abstract_away_complexity,_we3F4ACpEdu8m4dIntu6jA" guid="-X7QSjItNBz7w8603yBCv0Q" changeDate="2008-08-12T13:36:49.000+0200" version="1.0.0" mainDescription="&lt;p>&#xD;&#xA;    Software&amp;nbsp;development is a pursuit characterized by complexity. This can take many forms, such as accommodating&#xD;&#xA;    complex requirements, technology, or team dynamics. Elevating the level of abstraction helps you manage this complexity&#xD;&#xA;    and make measurable progress, despite the inherent difficulty of the task.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Suggestions for several strategies that help abstract away complexity follow.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h3>&#xD;&#xA;    Leverage patterns&#xD;&#xA;&lt;/h3>&#xD;&#xA;&lt;p>&#xD;&#xA;    Patterns help you take advantage of proven techniques for solving common problems. You can benefit from the experience&#xD;&#xA;    of seasoned practitioners and avoid &quot;re-inventing the wheel,&quot; as the saying goes. The use of patterns is a crucial&#xD;&#xA;    aspect of an architecture-centric approach to development, because it helps reduce the novelty and diversity of a&#xD;&#xA;    solution, thus improves quality.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    See &lt;a class=&quot;elementLinkWithType&quot;&#xD;&#xA;    href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/pattern_10BE6D96.html&quot;&#xD;&#xA;    guid=&quot;_0YJvUMlgEdmt3adZL5Dmdw&quot;>Concept: Pattern&lt;/a>&amp;nbsp;for more information.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h3>&#xD;&#xA;    Design the architecture with components and services&#xD;&#xA;&lt;/h3>&#xD;&#xA;&lt;p>&#xD;&#xA;    This strategy helps manage software complexity through&amp;nbsp;partitioning&amp;nbsp;a system into a set of loosely coupled&#xD;&#xA;    and highly cohesive components. The benefits of this approach include the ability to organize the team around a set of&#xD;&#xA;    smaller, more manageable objectives, and the ability to substitute parts of the system without disturbing the overall&#xD;&#xA;    cohesion of the system. Exposing services encourages re-use by making the functionality of the system easier to&#xD;&#xA;    comprehend. Focusing on services makes it possible to understand what the system does from a technical perspective&#xD;&#xA;    without necessarily having to understand the details of how the system works.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    See &lt;a class=&quot;elementLinkWithType&quot;&#xD;&#xA;    href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/component_CB167D48.html&quot;&#xD;&#xA;    guid=&quot;_0YP18MlgEdmt3adZL5Dmdw&quot;>Concept: Component&lt;/a>&amp;nbsp;for more information.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h3>&#xD;&#xA;    Actively promote reuse&#xD;&#xA;&lt;/h3>&#xD;&#xA;&lt;p>&#xD;&#xA;    Incorporating existing software into an overall architecture helps reduce cost and improve quality by reusing proven&#xD;&#xA;    working software, rather than developing from scratch. It also helps reduce the burden of maintenance by eliminating&#xD;&#xA;    duplication in the software. Although often difficult to manage, a project or enterprise can reap significant benefits&#xD;&#xA;    from a well-executed re-use strategy.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    See &lt;a class=&quot;elementLinkWithType&quot;&#xD;&#xA;    href=&quot;./../../../core.tech.common.extend_supp/guidances/guidelines/software_reuse_B6B04C26.html&quot;&#xD;&#xA;    guid=&quot;_vO2uoO0OEduUpsu85bVhiQ&quot;>Guideline: Software Reuse&lt;/a>&amp;nbsp;for more information.&#xD;&#xA;&lt;/p>" longPresentationName="abstract_away_complexity,_we3F4ACpEdu8m4dIntu6jA"/>
