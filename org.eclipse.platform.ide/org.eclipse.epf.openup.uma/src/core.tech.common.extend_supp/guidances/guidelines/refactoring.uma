<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="-i7KKltG_fEgqAjlVlIBGFA" name="refactoring,_YNx2sJ05EdyQ3oTO93enUw" guid="-i7KKltG_fEgqAjlVlIBGFA" changeDate="2008-08-12T14:00:22.000+0200" version="1.0.0" mainDescription="&lt;p>&#xD;&#xA;    Refactoring involves improving the quality of existing code without changing the system's behavior. It is explicitly&#xD;&#xA;    not about adding or changing behavior, but about improving the implementation quality of existing behavior.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    A full set of developer tests is required before refactoring can be safely applied. It is critical that the system&#xD;&#xA;    behavior be in a known, verifiably correct state before modifying the implementation so that you can improve the&#xD;&#xA;    quality without fear that the modified implementation will break something. Refactoring is a safe transformation to&#xD;&#xA;    improve code, but it is safe only if there are tests that can verify that the system still works as intended.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Refactoring is initiated when an area that needs improvement is identified in the system by examining either the code&#xD;&#xA;    or&amp;nbsp;some other&amp;nbsp;representation of the design. The issues identified are sometimes called &quot;smells.&quot;&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Here are several smells to look for that might lead to implementation or design refactoring:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;b>Duplicated code:&lt;/b> Duplicated code makes the system harder to understand and harder to maintain.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;b>Large design element or method:&lt;/b> Large design elements or methods diminish the ability of people to&#xD;&#xA;        understand the code, reduce the potential for reuse, and make developer testing more difficult.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;b>Poorly named element:&lt;/b> Whether the element be a variable, function, class, or implementation element, its&#xD;&#xA;        name should connote what it is so that the code can be maintained.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;strong>Tight coupling:&lt;/strong> Each design element should work with minimal concern for the internal aspects of&#xD;&#xA;        other design elements. Otherwise, changes to one element can have undesirable effects in other elements.&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;p>&#xD;&#xA;    As you can see from this list, refactoring can improve the &quot;internals&quot; of an element or&amp;nbsp;the interface of the&#xD;&#xA;    element. Also, many of the smells&amp;nbsp;are characterized as making the software more difficult to understand; whereas&#xD;&#xA;    refactoring is about making the system simpler.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    After an issue is identified, a refactoring method can be selected that will improve the situation. There are catalogs&#xD;&#xA;    of refactoring methods available that are change patterns that will fix common problems while retaining the behavior of&#xD;&#xA;    the system.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    These are examples of refactoring methods:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;b>Extract Method:&lt;/b> Pull out the duplicated code into its own single method or extract part of a large method&#xD;&#xA;        into its own method.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;b>Extract Class:&lt;/b> Pull some cohesive part of a class into its own class to reduce the size of a design element&#xD;&#xA;        that is too big.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;b>Rename Method&lt;/b>, &lt;b>Rename Class&lt;/b>, or &lt;b>Rename Variable:&lt;/b> Give a more meaningful name to an element to&#xD;&#xA;        make it more understandable.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;b>Extract Interface:&lt;/b> Create a clean interface.&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;p>&#xD;&#xA;    After refactoring has been applied, developer tests are run again to ensure that the system still behaves correctly. It&#xD;&#xA;    is important that the system is working correctly after each small refactoring. Although many refactorings can be put&#xD;&#xA;    together to drive broad change across the code base, the tests should run correctly between each refactoring applied.&#xD;&#xA;    Refactoring must be applied as small behavior-preserving transformations.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    As mentioned previously, refactoring requires full developer test coverage of the area under consideration. There are&#xD;&#xA;    additional techniques that enable refactoring. Coding standards define a common style and make it easier to refactor&#xD;&#xA;    consistently. An attitude of&amp;nbsp;collective code ownership within the team is important. Each developer should feel&#xD;&#xA;    that refactoring can be applied across the code base to improve the implementation.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    For deeper coverage on this topic, including a listing of &quot;smells&quot; and a catalog of refactorings to respond to them,&#xD;&#xA;    see [&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;&#xA;    href=&quot;./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html#FOW99&quot;&#xD;&#xA;    guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>FOW99&lt;/a>].&#xD;&#xA;&lt;/p>" longPresentationName="refactoring,_YNx2sJ05EdyQ3oTO93enUw"/>
