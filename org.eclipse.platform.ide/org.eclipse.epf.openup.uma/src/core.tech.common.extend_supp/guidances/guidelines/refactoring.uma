<?xml version="1.0" encoding="UTF-8"?><org.eclipse.epf.uma:ContentDescription xmlns:epf="http://www.eclipse.org/epf" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:xmi="http://www.omg.org/XMI" longPresentationName="refactoring,_YNx2sJ05EdyQ3oTO93enUw" xmi:version="2.0" epf:version="1.5.1" xmi:id="-i7KKltG_fEgqAjlVlIBGFA" name="refactoring,_YNx2sJ05EdyQ3oTO93enUw" guid="-i7KKltG_fEgqAjlVlIBGFA" changeDate="2008-08-12T14:00:22.000+0200" version="1.0.0">
  <mainDescription>&lt;p&gt;&#xD;
    Refactoring involves improving the quality of existing code without changing the system's behavior. It is explicitly&#xD;
    not about adding or changing behavior, but about improving the implementation quality of existing behavior.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    A full set of developer tests is required before refactoring can be safely applied. It is critical that the system&#xD;
    behavior be in a known, verifiably correct state before modifying the implementation so that you can improve the&#xD;
    quality without fear that the modified implementation will break something. Refactoring is a safe transformation to&#xD;
    improve code, but it is safe only if there are tests that can verify that the system still works as intended.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    Refactoring is initiated when an area that needs improvement is identified in the system by examining either the code&#xD;
    or&amp;nbsp;some other&amp;nbsp;representation of the design. The issues identified are sometimes called "smells."&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    Here are several smells to look for that might lead to implementation or design refactoring:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;b&gt;Duplicated code:&lt;/b&gt; Duplicated code makes the system harder to understand and harder to maintain.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;b&gt;Large design element or method:&lt;/b&gt; Large design elements or methods diminish the ability of people to&#xD;
        understand the code, reduce the potential for reuse, and make developer testing more difficult.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;b&gt;Poorly named element:&lt;/b&gt; Whether the element be a variable, function, class, or implementation element, its&#xD;
        name should connote what it is so that the code can be maintained.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;strong&gt;Tight coupling:&lt;/strong&gt; Each design element should work with minimal concern for the internal aspects of&#xD;
        other design elements. Otherwise, changes to one element can have undesirable effects in other elements.&#xD;
    &lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;p&gt;&#xD;
    As you can see from this list, refactoring can improve the "internals" of an element or&amp;nbsp;the interface of the&#xD;
    element. Also, many of the smells&amp;nbsp;are characterized as making the software more difficult to understand; whereas&#xD;
    refactoring is about making the system simpler.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    After an issue is identified, a refactoring method can be selected that will improve the situation. There are catalogs&#xD;
    of refactoring methods available that are change patterns that will fix common problems while retaining the behavior of&#xD;
    the system.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    These are examples of refactoring methods:&#xD;
&lt;/p&gt;&#xD;
&lt;ul&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;b&gt;Extract Method:&lt;/b&gt; Pull out the duplicated code into its own single method or extract part of a large method&#xD;
        into its own method.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;b&gt;Extract Class:&lt;/b&gt; Pull some cohesive part of a class into its own class to reduce the size of a design element&#xD;
        that is too big.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;b&gt;Rename Method&lt;/b&gt;, &lt;b&gt;Rename Class&lt;/b&gt;, or &lt;b&gt;Rename Variable:&lt;/b&gt; Give a more meaningful name to an element to&#xD;
        make it more understandable.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;b&gt;Extract Interface:&lt;/b&gt; Create a clean interface.&#xD;
    &lt;/li&gt;&#xD;
&lt;/ul&gt;&#xD;
&lt;p&gt;&#xD;
    After refactoring has been applied, developer tests are run again to ensure that the system still behaves correctly. It&#xD;
    is important that the system is working correctly after each small refactoring. Although many refactorings can be put&#xD;
    together to drive broad change across the code base, the tests should run correctly between each refactoring applied.&#xD;
    Refactoring must be applied as small behavior-preserving transformations.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    As mentioned previously, refactoring requires full developer test coverage of the area under consideration. There are&#xD;
    additional techniques that enable refactoring. Coding standards define a common style and make it easier to refactor&#xD;
    consistently. An attitude of&amp;nbsp;collective code ownership within the team is important. Each developer should feel&#xD;
    that refactoring can be applied across the code base to improve the implementation.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    For deeper coverage on this topic, including a listing of "smells" and a catalog of refactorings to respond to them,&#xD;
    see [&lt;a class="elementLinkWithUserText"&#xD;
    href="./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html#FOW99"&#xD;
    guid="_9ToeIB83Edqsvps02rpOOg"&gt;FOW99&lt;/a&gt;].&#xD;
&lt;/p&gt;</mainDescription>
</org.eclipse.epf.uma:ContentDescription>