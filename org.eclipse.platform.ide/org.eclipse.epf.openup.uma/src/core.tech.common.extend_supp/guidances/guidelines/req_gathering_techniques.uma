<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="_On0agNSAEdmLhZ9H5Plxyw" name="req_gathering_techniques,_OnoNQNSAEdmLhZ9H5Plxyw" guid="_On0agNSAEdmLhZ9H5Plxyw" changeDate="2008-10-15T15:42:15.000+0200" version="7.2.0" mainDescription="&lt;h3>&#xD;&#xA;    Sources of Requirements&#xD;&#xA;&lt;/h3>&#xD;&#xA;&lt;p>&#xD;&#xA;    Good requirements start with good sources. Finding those quality sources is an important task and, fortunately, one&#xD;&#xA;    that&amp;nbsp;takes few&amp;nbsp;resources. Examples of sources of requirements include:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Customers&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Users&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Administrators and maintenance&amp;nbsp;staff&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Partners&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Domain Experts&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Industry Analysts&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Information about competitors&amp;nbsp;&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;h3>&#xD;&#xA;    Requirements Gathering Techniques&#xD;&#xA;&lt;/h3>&#xD;&#xA;&lt;p>&#xD;&#xA;    After you have identified these sources, there are a number of techniques that may be used to gather requirements. The&#xD;&#xA;    following will describe the various techniques, followed by a brief discussion of when to use each technique.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    To get the requirements down on paper, you&amp;nbsp;can to do one or more of the following:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Conduct a brainstorming session&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Interview users&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Send questionnaires&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Work in the target environment&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Study analogous systems&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Examine suggestions and problem reports&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Talk to support teams&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Study improvements made by users&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Look at unintended uses&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Conduct workshops&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Demonstrate prototypes to stakeholders&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;p>&#xD;&#xA;    The best idea is to get the requirements down quickly and then to encourage the users to correct and improve them. Put&#xD;&#xA;    in those corrections, and repeat the cycle. Do it now, keep it small, and correct it at once. Start off with the best&#xD;&#xA;    structure you can devise, but expect to keep on correcting it throughout the process.&amp;nbsp; Success tips: Do it now,&#xD;&#xA;    keep it small, and correct it immediately.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Conduct a brainstorming session&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    Brainstorming is a short group session where everyone is allowed to say whatever they feel is important to the topic of&#xD;&#xA;    discussion. After that, a facilitator leads the group in organizing and prioritizing the results.&amp;nbsp; The following&#xD;&#xA;    basic rules for brainstorming&amp;nbsp;ensures better results:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Start out by clearly stating the objective of the brainstorming session.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Generate as may ideas as possible.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Let your imagination soar.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Do not allow criticism or debate while you are gathering information.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Once information is gathered,&amp;nbsp;reshape and combine ideas.&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Interview users&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    Face-to-face contact with users through individual interviewing is the primary source of requirements and an important&#xD;&#xA;    way you gather and validate their requirements. Remember that it is not the only possible technique, and that you can&#xD;&#xA;    conduct interviews many different ways. Develop a repertoire of styles to&amp;nbsp;fit different situations. Unless you use&#xD;&#xA;    the system yourself, you will need to make an effort to understand and experience the user's problem to describe it&#xD;&#xA;    clearly and correctly.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Send Questionnaires&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    If face-to-face meetings are possible, they are always preferable, because they provide a better means of uncovering&#xD;&#xA;    the problem behind the problem. Sometimes, though,&amp;nbsp;face-to-face meetings with stakeholders are not feasible (when&#xD;&#xA;    developing products for the consumer market, for example). In those situations, consider using questionnaires.&amp;nbsp;&#xD;&#xA;    Send a set of questions, possibly with multiple choice responses, to the relevant stakeholders, and ask them to&#xD;&#xA;    complete it and return it to you.&amp;nbsp; Success&amp;nbsp;tips: Keep it short and given them a deadline.&amp;nbsp;&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    This technique has the advantage of providing a lot of information for statistical analysis. However, the questions&#xD;&#xA;    must be well designed to be clear and to avoid so-called &quot;leading questions&quot;, which bias the responses.&amp;nbsp;&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Work in the target environment&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    Experience the work of the users for yourself. Working with users helps you understand problems that have resisted&#xD;&#xA;    previous solutions. Familiar systems developed in this way inevitably include tools for programmers, such as&#xD;&#xA;    interactive editors and compilers, as the developers naturally have both the expertise in the subject area, and the&#xD;&#xA;    desire to solve their own problems. It would be good to see the same dedication devoted to solving problems in other&#xD;&#xA;    areas too. Where the work cannot easily be experienced in this way, it may still be possible to do a bit more than just&#xD;&#xA;    sit quietly and observe. Users can give you a commentary on what they are doing, what the problems are, and what they&#xD;&#xA;    would like to have to make the work easier.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Study analogous systems&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    The starting point for many projects is often a similar or an existing system. Sometimes, comparable products and&#xD;&#xA;    systems contain working versions of good ideas for solving user problems. You can save the time lost in reinventing the&#xD;&#xA;    wheel by looking at systems already on the market, whether they are systems installed at the user's site or products&#xD;&#xA;    made by rival organizations. Even if they are trying to solve slightly different problems, they often&amp;nbsp;provide&#xD;&#xA;    valuable clues as to what you need to do.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Listen when a customer asks why a product couldn't do something that the customer wants, and keep a list of these&#xD;&#xA;    suggestions. Later, use it to start discussions with other users. You should be able to obtain some requirements&#xD;&#xA;    directly this way. If not, capture and store suggestions for future use.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    You can describe to users selected features of other products. Explain that the system is designed for&amp;nbsp;another&#xD;&#xA;    purpose&amp;nbsp;but contains an interesting feature, and you wonder it or something similar&amp;nbsp;would help them.&#xD;&#xA;    Sometimes these systems are described in documents, such as a contract from another organization or a report written&#xD;&#xA;    for management. Often, these documents were never intended as formal requirements, and were written merely to&#xD;&#xA;    communicate a stream-of-consciousness idea. Define a process of going from disorganized to organized information.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Such a process might involve the following activities:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Read the document from end to end (several times) to comprehend what the customer wants and what actually has been&#xD;&#xA;        written.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Classify all of the types of information in the document. (user, system requirements, design elements, plans,&#xD;&#xA;        background material, irrelevant detail)&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Mark up the original text to separate out such requirements.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Find a good structure for each of the different types of information such as: a scenario for the user requirements,&#xD;&#xA;        functional breakdown for the system requirements, and architecture for the design.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Organize the information to show gaps and overlaps. Feel free to add missing elements, but confirm these decisions&#xD;&#xA;        with the users.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Create traceability links between these information elements to show the designers exactly what the users want.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Convince the customer to accept the new information as the basis for the contract.&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Examine suggestions and problem reports&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    Requirements can come from change suggestions and user problems. A direct road to finding requirements is to look at&#xD;&#xA;    suggestions and problems as first described. Most organizations have a form for reporting system problems or software&#xD;&#xA;    defects. You can ask to look through the reports (and there will probably be many). Sort them into groups so you can&#xD;&#xA;    identify the key areas that are troubling users. Ask users some questions about these areas to clarify the users'&#xD;&#xA;    actual needs.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Talk to support teams&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    Most large sales organizations have a help desk that keeps a log of problems and fixes, and support engineers who do&#xD;&#xA;    the fixing. Many organizations have similar facilities to support their own operations. Talking to the help desk staff&#xD;&#xA;    and the support engineers may give you good leads into the requirements, and save you time. Also talk to the training&#xD;&#xA;    team and installation teams about what users find to be&amp;nbsp;difficult.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Study improvements made by users&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    This is an excellent source of requirements. Users of a standard company spreadsheet may have added a few fields, or&#xD;&#xA;    related different sheets together, or drawn a graph, that exactly meets their individual needs. You need only ask: Why&#xD;&#xA;    did you add that? Their answers help you&amp;nbsp;get to the heart of the actual requirement. This applies also to hardware&#xD;&#xA;    and non-computer devices. For example, a lathe operator may have manufactured a special clamp, or an arm that prevents&#xD;&#xA;    movement of the tool beyond a certain point. Any such modification points to something wrong with the existing product,&#xD;&#xA;    which makes it&amp;nbsp;a valid&amp;nbsp;requirement for the new version.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Look at unintended uses&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    People often use things for purposes for which they were not designed.&amp;nbsp; This is&amp;nbsp;a good way to get new ideas&#xD;&#xA;    and to think of innovations. For example, an observant product manager noticed that an engineer was staying in the&#xD;&#xA;    office late to use an advanced computer-aided design system to design a new kitchen layout for his home. Inexpensive&#xD;&#xA;    commercial products are now widely available for home use.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Conduct workshops&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    Workshops can rapidly pull together a good set of requirements. In two to five days, you can create a set of&#xD;&#xA;    requirements, and then review and improve them. If everyone in a workshop tries to estimate the cost and value of each&#xD;&#xA;    requirement, the document becomes much more useful and cost-effective.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Workshops are quicker and better at discovering requirements than other techniques, such as sending questionnaires. You&#xD;&#xA;    are bringing the right collection of people together, and getting them to correct and improve on their requirements&#xD;&#xA;    document.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    A workshop is inherently expensive because of the number of people involved, but it saves a large amount of time. If&#xD;&#xA;    you can define the product right the first time and cut three months off the requirements gathering, the savings could&#xD;&#xA;    be enormous. The workshop has to be thoroughly organized to take advantage of people's time.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Choose a quiet location for the workshop so that people are not disturbed by day-to-day business. Mobile phones should&#xD;&#xA;    be discouraged; arrange to take messages externally. Take advantage of informal interactions by choosing a site so that&#xD;&#xA;    people don't go home at night or go out separately. The example&amp;nbsp;in Figure 1&amp;nbsp;shows the logic of a requirements&#xD;&#xA;    workshop. Note that the workshop provides the environment in which to apply other requirements-gathering techniques&#xD;&#xA;    such as brainstorming.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    &lt;img height=&quot;381&quot; alt=&quot;&quot; src=&quot;resources/workshop_activity_diagram.gif&quot; width=&quot;542&quot; />&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    &lt;strong>Figure 1: Conducting Workshops&lt;/strong>&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Demonstrate prototypes to stakeholders&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    Prototypes allow us to immediately see some aspects of the system. Showing users a simple prototype can&#xD;&#xA;    provoke&amp;nbsp;them into giving good requirements information or changing their mind about existing requirements. The&#xD;&#xA;    techniques described here help you gather ideas for requirements. Prototypes and models are an excellent way of&#xD;&#xA;    presenting ideas to users. They can illustrate how an approach might work, or give users a glimpse of what they might&#xD;&#xA;    be able to do. More requirements are likely to emerge when users see what you are suggesting.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    A presentation can use a sequence of slides, storyboard, an artist's impression, or even an animation to give users a&#xD;&#xA;    vision of the possibilities. When prototyping software, make a mock-up of the user interface screens, emphasizing that&#xD;&#xA;    there is no code and that the system has not been designed or even specified yet (fair warning: there are dangers here&#xD;&#xA;    for the unwary).&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    This prototyping aims to get users to express (missing) requirements. You are not trying to sell users an idea or&#xD;&#xA;    product, you are finding out what they actually want. Seeing a prototype, which invariably is wrong in some ways and&#xD;&#xA;    right in others, is a powerful stimulus to users to start saying what they want. They may point out plenty of problems&#xD;&#xA;    with the prototype! This is excellent,&amp;nbsp;because each problem leads to a new requirement.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h3>&#xD;&#xA;    Which Technique to Apply?&#xD;&#xA;&lt;/h3>&#xD;&#xA;&lt;p>&#xD;&#xA;    Which technique to apply depends on a number of factors, such as:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Availability and location of stakeholders&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Development team knowledge of the problem domain&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Customers' and users' knowledge of the problem domain&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Customers' and users' knowledge of the development process and methods&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;p>&#xD;&#xA;    If the stakeholders are not co-located or readily available, for example in the case of a product being developed for&#xD;&#xA;    mass market,&amp;nbsp;techniques such as brainstorming, interviews and workshops that require face-to-face contact with the&#xD;&#xA;    stakeholders may be difficult or impossible.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    If the stakeholders are available for face-to-face meetings, this is a much better situation and almost all of the&#xD;&#xA;    techniques described, or combination of them, may be applied. In this case, the domain and development experience of&#xD;&#xA;    both the stakeholders and the development team are critical factors in selecting the appropriate technique.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Figure 2, adapted from &lt;a&#xD;&#xA;    href=&quot;./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html&quot;&#xD;&#xA;    guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>[HIC03]&lt;/a>, provides a framework for determining the appropriate techniques. It defines&#xD;&#xA;    four main categories of customer or user experience and development team experience: &quot;Fuzzy problem&quot;,&#xD;&#xA;    &quot;Selling/Teaching&quot;, &quot;Catch up&quot;, and &quot;Mature&quot;.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    &lt;img height=&quot;470&quot; alt=&quot;&quot; src=&quot;resources/which_req_gathering_technique.gif&quot; width=&quot;514&quot; />&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    &lt;strong>Figure 2: Selection of Techniques&lt;/strong>&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    There is no &quot;right answer&quot;, but these guidelines may help you decide which method to use:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Catch-up: Interviews, work in target environment&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Fuzzy: Brainstorming, workshops&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Mature: Questionnaires, workshops, prototypes&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Selling/Teaching: prototypes&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>" longPresentationName="req_gathering_techniques,_OnoNQNSAEdmLhZ9H5Plxyw"/>
