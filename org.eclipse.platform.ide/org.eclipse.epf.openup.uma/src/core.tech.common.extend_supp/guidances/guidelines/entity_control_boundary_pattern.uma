<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="-awaQ_2dwhGyKRoVKQ-esPQ" name="finding_analysis_classes,_uF-QYEAhEdq_UJTvM1DM2Q" guid="-awaQ_2dwhGyKRoVKQ-esPQ" changeDate="2008-09-04T12:21:52.000+0200" version="1.0.0" mainDescription="&lt;p>&#xD;&#xA;    When identifying the elements for a scenario of system behavior, you can align each participating element with one of&#xD;&#xA;    three key perspectives: &lt;b>Entity&lt;/b>, &lt;b>Control&lt;/b>, or &lt;b>Boundary&lt;/b>. Although specifics of languages, frameworks,&#xD;&#xA;    and heuristics of quality design will drive the final design, a first cut that covers required system behavior can&#xD;&#xA;    always be assembled with elements of these three perspectives.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    This pattern is similar to the Model View Controller pattern (described here [&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;&#xA;    href=&quot;./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html#BUS96&quot;&#xD;&#xA;    guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>BUS96&lt;/a>] and here [&lt;a class=&quot;elementLinkWithUserText&quot;&#xD;&#xA;    href=&quot;./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html#WIKP-MVC&quot;&#xD;&#xA;    guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>WIKP-MVC&lt;/a>], among other places), but the Entity Control Boundary (ECB) pattern is not&#xD;&#xA;    solely appropriate for dealing with user interfaces, and it gives the controller a slightly different role to play.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4 align=&quot;left&quot;>&#xD;&#xA;    ECB&amp;nbsp;pattern example&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    &amp;nbsp;&lt;img alt=&quot;&quot; src=&quot;resources/ebc_diagram.jpg&quot; />&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h3>&#xD;&#xA;    Entity elements&#xD;&#xA;&lt;/h3>&#xD;&#xA;&lt;p>&#xD;&#xA;    An entity is a long-lived, passive element that is responsible for some meaningful chunk of information. This is not to&#xD;&#xA;    say that entities are &quot;data,&quot; while other design elements are &quot;function.&quot; Entities perform behavior organized around&#xD;&#xA;    some cohesive amount of data.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    An example of an entity for a customer service application is a Customer entity that manages all information about a&#xD;&#xA;    customer. A design element for&amp;nbsp;this entity would include data about the customer, behavior to manage the data,&#xD;&#xA;    behavior to validate customer information&amp;nbsp;and to perform other business calculations, such as &quot;Is this customer&#xD;&#xA;    allowed to purchase product X?&quot;&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    The identification of the entities as part of this pattern can be done many times at different levels of abstraction&#xD;&#xA;    from the code, at different levels of granularity in size, and from the perspectives of different contexts. For&#xD;&#xA;    example, you could do an analysis pass on a scenario of creating a marketing campaign and identify the customer element&#xD;&#xA;    with various customer data elements, such as name and address, plus various required behaviors, such as the management&#xD;&#xA;    of the name and address data and the ability to rate the customer based on some algorithm (such an application of this&#xD;&#xA;    pattern would be abstract from code, coarse-grained, and have no specific context). Later, you could do a pass on the&#xD;&#xA;    same scenario applying an architectural mechanism for database access that breaks the address out as its own element,&#xD;&#xA;    moves the responsibility for storing and retrieving customers to a new control element, and identifies specific&#xD;&#xA;    database decisions, such as the use of primary keys in the entities. (Such an application of this pattern would be&#xD;&#xA;    closer to the code, finer-grained, and aligned with a database&amp;nbsp;context.)&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h3>&#xD;&#xA;    Control elements&#xD;&#xA;&lt;/h3>&#xD;&#xA;&lt;p>&#xD;&#xA;    A control element manages the flow of interaction of the scenario. A control element could manage the end-to-end&#xD;&#xA;    behavior of a scenario or it could manage the interactions between a subset of the elements. Behavior and business&#xD;&#xA;    rules relating to the information relevant to the scenario should be assigned to the entities; the control elements are&#xD;&#xA;    responsible only for the flow of the scenario.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    CreateMarketingCampaign is an example of a control element for a customer service application. This design element&#xD;&#xA;    would&amp;nbsp;be responsive to certain front-end boundary elements and would collaborate with other entities,&#xD;&#xA;    control&amp;nbsp;elements, and back-end boundary elements to support the creation of a marketing campaign.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    As with the entity example here, there might be many passes over the identification of control elements. A first pass&#xD;&#xA;    might be an analysis pass that identifies one control element for a scenario, with behavior to make sure that the&#xD;&#xA;    design can support the flow of events. A&amp;nbsp;subsequent pass might find controllers to manage reusable collaborations&#xD;&#xA;    of low-level elements that will map to a specific code&amp;nbsp;unit to be written.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h3>&#xD;&#xA;    Boundary elements&#xD;&#xA;&lt;/h3>&#xD;&#xA;&lt;p>&#xD;&#xA;    A boundary element lies on the periphery of a system or subsystem, but within it. For any scenario being considered&#xD;&#xA;    either across the whole system or within some subsystem, some boundary elements will be &quot;front end&quot; elements that&#xD;&#xA;    accept input from outside of the area under design, and other elements will be &quot;back end,&quot; managing communication to&#xD;&#xA;    supporting elements outside of the system or subsystem.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Two examples of boundary elements for a customer service application might be a front end MarketingCampaignForm and a&#xD;&#xA;    back end BudgetSystem element. The MarketingCampaignForm would manage the exchange of information between a user and&#xD;&#xA;    the system, and the BudgetSystem would manage the exchange of information between the system and an external system&#xD;&#xA;    that manages budgets.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    If the system communicates with another system (where that system could be anything from software to hardware units&#xD;&#xA;    that the current system will use, such as printers, terminals, alarm devices, and sensors).&amp;nbsp; An analysis pass&#xD;&#xA;    could identify one boundary element for each external relevant to a scenario.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Example:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;blockquote>&#xD;&#xA;    &lt;p>&#xD;&#xA;        An automated teller machine (ATM) must communicate with the ATM network to ascertain whether a customer's bank&#xD;&#xA;        number and PIN are correct, and whether the customer has sufficient funds to withdrawal the requested amount. The&#xD;&#xA;        ATM network is an external system (from the perspective of the ATM); therefore, you would use a&#xD;&#xA;        &lt;strong>boundary&lt;/strong> class to represent it in a use-case analysis.&#xD;&#xA;    &lt;/p>&#xD;&#xA;&lt;/blockquote>&#xD;&#xA;&lt;p>&#xD;&#xA;    Subsequently, these could be broken down into multiple boundary elements or small communities made up of collaborating&#xD;&#xA;    elements of all three stereotypes. If the interfaces with the system are simple and well-defined, a single class may be&#xD;&#xA;    sufficient to represent the external system. Often, however, these interfaces are too complex to be represented by&#xD;&#xA;    using a single class; they often require complex collaborations of many classes. Moreover, interfaces between systems&#xD;&#xA;    are often highly reusable across applications. As a result, in many cases, a component models the system interfaces&#xD;&#xA;    more appropriately.&amp;nbsp; The use of a component allows the interface to the external system to be defined and&#xD;&#xA;    stabilized, while leaving the design details of the system interface hidden as the system evolves.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h3>&#xD;&#xA;    Walking through the scenario&#xD;&#xA;&lt;/h3>&#xD;&#xA;&lt;p>&#xD;&#xA;    You can walk through a scenario initiated by something outside of the boundaries of the system or subsystem being&#xD;&#xA;    designed and distribute the responsibility to perform behavior supporting the scenario to the elements identified of&#xD;&#xA;    each type. The appropriate design element responsible for each action in the scenario will be as described in the&#xD;&#xA;    definition of each of the element types described here previously.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    In addition to identifying the behavior necessary to perform the scenario, the initiation of this behavior from design&#xD;&#xA;    element to design element identifies the necessary relationships. There are certain appropriate relations between the&#xD;&#xA;    participating elements. An element can communicate with other elements of the same kind. Control elements can&#xD;&#xA;    communicate with each of the other two kinds, but entities and boundary elements should not communicate directly.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    This table shows appropriate links between design elements.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;table cellspacing=&quot;2&quot; cellpadding=&quot;2&quot; width=&quot;400&quot; summary=&quot;Appropriate Links&quot; border=&quot;1&quot;>&#xD;&#xA;    &lt;tbody>&#xD;&#xA;        &lt;tr>&#xD;&#xA;            &lt;td>&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;th scope=&quot;col&quot;>&#xD;&#xA;                &lt;center>&#xD;&#xA;                    Entity&#xD;&#xA;                &lt;/center>&#xD;&#xA;            &lt;/th>&#xD;&#xA;            &lt;th scope=&quot;col&quot;>&#xD;&#xA;                &lt;center>&#xD;&#xA;                    Boundary&#xD;&#xA;                &lt;/center>&#xD;&#xA;            &lt;/th>&#xD;&#xA;            &lt;th scope=&quot;col&quot;>&#xD;&#xA;                &lt;center>&#xD;&#xA;                    Control&#xD;&#xA;                &lt;/center>&#xD;&#xA;            &lt;/th>&#xD;&#xA;        &lt;/tr>&#xD;&#xA;        &lt;tr>&#xD;&#xA;            &lt;th scope=&quot;row&quot;>&#xD;&#xA;                Entity&#xD;&#xA;            &lt;/th>&#xD;&#xA;            &lt;td>&#xD;&#xA;                &lt;center>&#xD;&#xA;                    X&#xD;&#xA;                &lt;/center>&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;                &lt;center>&#xD;&#xA;                    X&#xD;&#xA;                &lt;/center>&#xD;&#xA;            &lt;/td>&#xD;&#xA;        &lt;/tr>&#xD;&#xA;        &lt;tr>&#xD;&#xA;            &lt;th scope=&quot;row&quot;>&#xD;&#xA;                Boundary&#xD;&#xA;            &lt;/th>&#xD;&#xA;            &lt;td>&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;                &lt;center>&#xD;&#xA;                    X&#xD;&#xA;                &lt;/center>&#xD;&#xA;            &lt;/td>&#xD;&#xA;        &lt;/tr>&#xD;&#xA;        &lt;tr>&#xD;&#xA;            &lt;th scope=&quot;row&quot;>&#xD;&#xA;                Control&#xD;&#xA;            &lt;/th>&#xD;&#xA;            &lt;td>&#xD;&#xA;                &lt;center>&#xD;&#xA;                    X&#xD;&#xA;                &lt;/center>&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;                &lt;center>&#xD;&#xA;                    X&#xD;&#xA;                &lt;/center>&#xD;&#xA;            &lt;/td>&#xD;&#xA;            &lt;td>&#xD;&#xA;                &lt;center>&#xD;&#xA;                    X&#xD;&#xA;                &lt;/center>&#xD;&#xA;            &lt;/td>&#xD;&#xA;        &lt;/tr>&#xD;&#xA;    &lt;/tbody>&#xD;&#xA;&lt;/table>&#xD;&#xA;&lt;p>&#xD;&#xA;    By applying this pattern, you can put a robust design together that identifies the elements, behavior, and&#xD;&#xA;    relationships necessary to support a scenario.&#xD;&#xA;&lt;/p>" longPresentationName="finding_analysis_classes,_uF-QYEAhEdq_UJTvM1DM2Q"/>
