<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="_lbGQwMM3EdmSIPI87WLu3g" name="layering,_0gpkAMlgEdmt3adZL5Dmdw" guid="_lbGQwMM3EdmSIPI87WLu3g" changeDate="2008-02-11T19:31:51.000+0100" version="1.0.0" mainDescription="&lt;p>&#xD;&#xA;    Layering&amp;nbsp; is&amp;nbsp;one of the most&amp;nbsp;commonly used&amp;nbsp;approaches for structuring and decomposing systems.&#xD;&#xA;    Layering logically partitions the system into sets of components with certain rules regarding how relationships can be&#xD;&#xA;    formed between them. Layering provides a way to restrict inter-subsystem dependencies, with the result that the system&#xD;&#xA;    is more loosely coupled and more easily maintained.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Consider the number and purpose of the layers carefully. Do not over-complicate the solution by defining more layers&#xD;&#xA;    than are needed to meet the needs of the solution. More layers can always be added in the future to meet new&#xD;&#xA;    requirements. Removing layers is not always as easy and may introduce risks into the project.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    The criteria for grouping elements into layers follows a few patterns:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;b>Visibility&lt;/b>&lt;strong>:&lt;/strong> Elements may depend only on components in the same layer and the next-lower&#xD;&#xA;        layer.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;b>Volatility&lt;/b>&lt;strong>:&lt;/strong> &#xD;&#xA;        &lt;ul>&#xD;&#xA;            &lt;li>&#xD;&#xA;                &lt;b>In the highest layers&lt;/b>, put elements that vary when user requirements change.&#xD;&#xA;            &lt;/li>&#xD;&#xA;            &lt;li>&#xD;&#xA;                &lt;b>In the lowest layers&lt;/b>, put elements that vary when the implementation platform changes (hardware,&#xD;&#xA;                language, operating system, database, and so forth).&#xD;&#xA;            &lt;/li>&#xD;&#xA;            &lt;li>&#xD;&#xA;                &lt;strong>Sandwiched in the middle&lt;/strong>, put elements that are generally applicable across wide ranges of&#xD;&#xA;                systems and implementation environments.&#xD;&#xA;            &lt;/li>&#xD;&#xA;            &lt;li>&#xD;&#xA;                &lt;strong>Add layers&lt;/strong> when additional partitions within these broad categories help to organize the&#xD;&#xA;                model.&#xD;&#xA;            &lt;/li>&#xD;&#xA;        &lt;/ul>&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;b>Generality&lt;/b>&lt;strong>:&lt;/strong> Abstract elements tend to be placed in the lower layers. If not&#xD;&#xA;        implementation-specific, they tend to gravitate toward the middle layers.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;b>Number of layers.&lt;/b> For a small system, three layers are typically sufficient.&amp;nbsp;A three-layer architecture&#xD;&#xA;        of&amp;nbsp;Presentation, Business, and Data layers is very common in information systems.&amp;nbsp; For a complex system,&#xD;&#xA;        five to seven layers could be appropriate. For any degree of complexity, more than 10 layers should be viewed with&#xD;&#xA;        suspicion that increases with the number of layers.&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;p>&#xD;&#xA;    Failure to restrict dependencies according to the visibility criteria mentioned above can cause architectural&#xD;&#xA;    degradation and make the system difficult to extend and maintain.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Allowable exceptions to the visibility rule include cases where components need direct access to lower-layer services&#xD;&#xA;    beyond the next-lower layer. Make a decision about how to handle primitive services that are needed throughout the&#xD;&#xA;    system, such as printing, sending messages, and so forth. There is little value in restricting messages to lower layers&#xD;&#xA;    if the solution is to effectively implement call pass-throughs in the intermediate layers.&amp;nbsp;&amp;nbsp;This usage of a&#xD;&#xA;    less strict rule on dependencies down through the layers is sometimes called a Relaxed Layered Architecture (&lt;a&#xD;&#xA;    class=&quot;elementlinkwithusertext&quot;&#xD;&#xA;    href=&quot;./../../../core.tech.common.base/guidances/supportingmaterials/references.tech_6CCF393.html#BUS96&quot;&#xD;&#xA;    guid=&quot;_9ToeIB83Edqsvps02rpOOg&quot;>[BUS96]&lt;/a>).&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    &lt;a id=&quot;PartitioningPatterns&quot; name=&quot;PartitioningPatterns&quot;>Partitioning patterns&lt;/a>&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    Within the top layers of the system, additional partitioning may help organize the model. The following guidelines for&#xD;&#xA;    partitioning present different issues to consider:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    &lt;b>User organization&lt;/b>&lt;strong>:&lt;/strong> Elements may be organized along lines that mirror the organization of&#xD;&#xA;    functionality in the business organization (partitioning occurs along departmental or user role lines). This&#xD;&#xA;    partitioning often occurs early in the design&amp;nbsp;due to&amp;nbsp;an existing enterprise model that is strongly&#xD;&#xA;    partitioned according to the structure of the organization. This pattern usually affects only the top few layers of&#xD;&#xA;    application-specific services and can often disappear as the design evolves.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;p>&#xD;&#xA;            Partitioning along user-organization lines can be a good starting point for the model.&#xD;&#xA;        &lt;/p>&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;p>&#xD;&#xA;            The structure of the user organization is not stable over a long period of time because business&#xD;&#xA;            reorganizations occur; therefore, it is not a good long-term basis for system partitioning. The internal&#xD;&#xA;            organization of the system should enable the system to evolve and be maintained independently of the&#xD;&#xA;            organization of the business that it supports.&#xD;&#xA;        &lt;/p>&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;p>&#xD;&#xA;    &lt;b>Areas of competence and skills:&lt;/b> Elements may be organized to partition responsibilities among different groups&#xD;&#xA;    within the development organization. Typically, this occurs in the middle and lower layers of the system, and reflects&#xD;&#xA;    the need for specialization in skills during the development and support of an infrastructure based on complex&#xD;&#xA;    technology. Examples of such technologies include network and distribution management, database management,&#xD;&#xA;    communication management, and process control, among others. Partitioning along competence lines may also occur in&#xD;&#xA;    upper layers, where special competency in the problem domain is required to understand and support key business&#xD;&#xA;    functionality. Examples include telecommunication call management, securities trading, insurance claims processing, and&#xD;&#xA;    air traffic control, to name a few.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    &lt;b>System distribution:&lt;/b> Within any of the layers of the system, the layers may be further partitioned horizontally,&#xD;&#xA;    so to speak, to reflect the distribution of functionality.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;p>&#xD;&#xA;            Partitioning to reflect distribution of functionality can help you visualize the network communication that&#xD;&#xA;            will occur as the system runs.&#xD;&#xA;        &lt;/p>&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;p>&#xD;&#xA;            Partitioning to reflect distribution can also, however, make the system more difficult to change if the&#xD;&#xA;            deployment model changes significantly.&#xD;&#xA;        &lt;/p>&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;p>&#xD;&#xA;    &lt;b>Secrecy areas&lt;/b>&lt;strong>:&lt;/strong> Some applications, especially those requiring special security clearance to&#xD;&#xA;    develop or support, require additional partitioning according to security access privileges. Software that controls&#xD;&#xA;    access to secrecy areas must be developed and maintained by personnel with appropriate clearance. If the number of&#xD;&#xA;    people with this background on the project is limited, the functionality requiring special clearance must be&#xD;&#xA;    partitioned into subsystems that will be developed independently from other subsystems, with the interfaces to the&#xD;&#xA;    secrecy areas the only visible aspect of these subsystems.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    &lt;b>Variability areas:&lt;/b> Functionality that is likely to be optional, and therefore delivered only in some variants of&#xD;&#xA;    the system, should be organized into independent components that are developed and delivered independently from the&#xD;&#xA;    mandatory functionality of the system.&#xD;&#xA;&lt;/p>" longPresentationName="layering,_0gpkAMlgEdmt3adZL5Dmdw"/>
