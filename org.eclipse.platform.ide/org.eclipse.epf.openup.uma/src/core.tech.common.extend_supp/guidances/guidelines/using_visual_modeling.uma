<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="-QklqSGB4aD07vUpfubpMJg" name="new_guideline,_0SsecNr8EdyXE6np2_hUMA" guid="-QklqSGB4aD07vUpfubpMJg" changeDate="2008-02-14T14:06:27.000+0100" version="7.2.0" mainDescription="&lt;p>&#xD;&#xA;    When applying visual modeling, you can use various techniques:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;strong>Identify the key perspectives:&lt;/strong> Focus on modeling the things that count. Few (if any) projects&#xD;&#xA;        benefit from modeling the entire design to a great level of detail. Make sure that you understand why you are&#xD;&#xA;        modeling something and who will benefit.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;strong>Communicate key architectural perspectives:&lt;/strong> Even if you choose to model very little&amp;nbsp;of your&#xD;&#xA;        design, it is often advantageous to produce diagrams that communicate the key architectural aspects of the system.&#xD;&#xA;        Conveying the &quot;big picture&quot; to the rest of the team helps them understand the overall approach and develop cohesive&#xD;&#xA;        software.&amp;nbsp;&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;strong>Sketch the design:&lt;/strong> Not all models need to be detailed completely and presented in a software&#xD;&#xA;        modeling tool. It is often perfectly acceptable (if not desirable) to produce hand-drawn sketches on paper or on a&#xD;&#xA;        whiteboard when you are exploring and communicating the architecture and design with your team. You can use a&#xD;&#xA;        digital camera or an electronic whiteboard to capture these diagrams and share them. For many small projects, this&#xD;&#xA;        is often all you need. See &lt;a href=&quot;http://www.agilemodeling.com/&quot;>http://www.agilemodeling.com/&lt;/a> for more&#xD;&#xA;        information.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;strong>Use a modeling tool as needed&lt;/strong>:&amp;nbsp;If the team members are changing models throughout the&#xD;&#xA;        project, sharing patterns/structure, debugging design, describing behavior, etc., then static photos or paper will&#xD;&#xA;        become difficult to work with. The team may want to capture design in a software modeling tool. Other than&#xD;&#xA;        communicating the design to the team, another benefit of a such a tool is the&amp;nbsp;generation of structural code&#xD;&#xA;        from the models. Many software development tools allow you to view the code as models, making it easier to&#xD;&#xA;        comprehend static and dynamic aspects of a complex code base.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;strong>Agree on a standard notation:&lt;/strong> In a team environment, it is important that others can understand&#xD;&#xA;        your diagrams without much explanation. Choosing a standard notation enables others to quickly comprehend your&#xD;&#xA;        diagrams without ambiguity. The Unified Modeling Language (UML) provides an industry-standard approach to software&#xD;&#xA;        modeling and is an example of a widely understood notation.&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>For more information, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;&#xA;href=&quot;./../../../core.tech.common.extend_supp/guidances/concepts/visual_modeling_2C089766.html&quot;&#xD;&#xA;guid=&quot;_0XY6UMlgEdmt3adZL5Dmdw&quot;>Concept: Visual Modeling&lt;/a>.&lt;br />" longPresentationName="new_guideline,_0SsecNr8EdyXE6np2_hUMA"/>
