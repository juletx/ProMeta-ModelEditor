<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ArtifactDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="-1QQ8ajRx-ZzZnCjhkuaMXQ" name="developer_test,_0YuXEclgEdmt3adZL5Dmdw" guid="-1QQ8ajRx-ZzZnCjhkuaMXQ" changeDate="2009-07-28T10:16:53.000+0200" version="1.0.0" mainDescription="&lt;p>&#xD;&#xA;    This artifact covers all of the steps to validate a specific aspect of an implementation element. For example, a test&#xD;&#xA;    could ensure that the parameters of a method properly accept the uppermost and lowermost required values. A developer&#xD;&#xA;    test specifies test entries, execution conditions, and expected results. These details are identified to evaluate a&#xD;&#xA;    particular aspect of a scenario.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    When you collect developer tests for a specific implementation element, you can validate that the element performs as&#xD;&#xA;    specified.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    The tests be self-documenting so that it is clear upon completion of the test whether the implementation element has&#xD;&#xA;    run correctly.&#xD;&#xA;&lt;/p>" longPresentationName="developer_test,_0YuXEclgEdmt3adZL5Dmdw" purpose="This artifact is used to evaluate whether an implementation element performs as specified." impactOfNotHaving="If you do not run developer tests, you cannot ensure that elements that you modify over time are working. This can inhibit&#xD;&#xA;iterative development and maintenance." reasonsForNotNeeding="If you can embed the tests into the production code, you might not need a separate work product. Nonetheless, some level of&#xD;&#xA;support for developer testing is always necessary when you develop application software." briefOutline="&lt;p>&#xD;&#xA;    Although there is no predefined template for this work product, and testing tools affect how the work product is&#xD;&#xA;    handled, you should address the following issues:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Setup&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Inputs&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Script&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Expected Results&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Evaluation Criteria&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Clean-Up&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>" representationOptions="&lt;p align=&quot;left&quot;>&#xD;&#xA;    Suggestions and options for representing this work product:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Suggestion: Automated code unit&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    The most appropriate technique for running these tests is to use code that tests the implementation element scenarios&#xD;&#xA;    and that you can run regularly as you update the system during development.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    When code is the sole form of the tests, ensure that the code is self-documenting. The code should document the&#xD;&#xA;    specifications of the conditions you are testing and the setup or clean-up that is required for the test to run&#xD;&#xA;    properly.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Option: Manual instructions&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    In some cases, you can use manual instructions. For example, when testing a user interface, a developer might follow a&#xD;&#xA;    script, explaining the implementation element. In this case, it is still valuable to create a test harness that goes&#xD;&#xA;    straight to the user interface. That way, the developer can follow the script without having to follow a complicated&#xD;&#xA;    set of instructions to find a particular screen or page.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;h4>&#xD;&#xA;    Option: Embedded code&#xD;&#xA;&lt;/h4>&#xD;&#xA;&lt;p>&#xD;&#xA;    You can use certain technologies (such as Java(TM)5 Test Annotation) to embed tests in the implementation. In these&#xD;&#xA;    cases, there will be a logical work product, but it will be assimilated into the code that you are testing. When you&#xD;&#xA;    use this option, ensure that the code is self-documenting.&#xD;&#xA;&lt;/p>"/>
