<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore">
  <org.eclipse.epf.uma:ProcessDescription xmi:id="-pszgT2UQY1AzlzJLFM1S5g" name="construction_phase_iteration,_RQi0AdONEdyqlogshP8l4g" guid="-pszgT2UQY1AzlzJLFM1S5g" version="7.2.0" mainDescription="&lt;p>&#xA;    The architecture should be stable when the Construction phase starts, allowing the remaining requirements to be&#xA;    implemented on top of it. Another advantage of validating the architecture and eliminating as many risks as possible&#xA;    during Elaboration is that it provides more predictability in Construction, which allows the project manager to focus&#xA;    on team efficiency and cost reduction.&#xA;&lt;/p>&#xA;&lt;p>&#xA;    Functionality is continuously implemented, tested, and integrated, resulting in builds that are more and more complete&#xA;    and stable. You may deploy a beta or prerelease to a sampling of the intended audience at the end of Construction.&#xA;    Delivery of the actual release is the main focus of the next phase.&#xA;&lt;/p>&#xA;&lt;p>&#xA;    The following table summarizes the&amp;nbsp;Construction phase objectives and&amp;nbsp;what activities address each objective:&#xA;&lt;/p>&#xA;&lt;p align=&quot;center&quot;>&#xA;    &lt;strong>Construction phase objectives and activities&lt;/strong>&#xA;&lt;/p>&#xA;&lt;table cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; width=&quot;648&quot; align=&quot;center&quot; border=&quot;1&quot;>&#xA;    &lt;tbody>&#xA;        &lt;tr>&#xA;            &lt;td class=&quot;Normal&quot; valign=&quot;top&quot; width=&quot;300&quot;>&#xA;                &lt;p style=&quot;TEXT-ALIGN: justify&quot;>&#xA;                    &lt;b>Phase objectives&lt;/b>&#xA;                &lt;/p>&#xA;            &lt;/td>&#xA;            &lt;td class=&quot;Normal&quot; valign=&quot;top&quot; width=&quot;348&quot;>&#xA;                &lt;p style=&quot;TEXT-ALIGN: justify&quot;>&#xA;                    &lt;b>Activities that address objectives&lt;/b>&#xA;                &lt;/p>&#xA;            &lt;/td>&#xA;        &lt;/tr>&#xA;        &lt;tr>&#xA;            &lt;td class=&quot;Normal&quot; valign=&quot;top&quot; width=&quot;300&quot;>&#xA;                Iteratively develop a complete product that is ready to transition to the user community&lt;br />&#xA;            &lt;/td>&#xA;            &lt;td class=&quot;Normal&quot; valign=&quot;top&quot; width=&quot;348&quot;>&#xA;                &lt;p style=&quot;TEXT-ALIGN: justify&quot;>&#xA;                    &lt;a class=&quot;elementLink&quot; href=&quot;./../../process.openup.base/capabilitypatterns/identify_and_refine_requirements_7FA6CB14.html&quot; guid=&quot;_xxcpgdOEEdyqlogshP8l4g&quot;>Identify and Refine Requirements&lt;/a>&#xA;                &lt;/p>&#xA;                &lt;p style=&quot;TEXT-ALIGN: justify&quot;>&#xA;                    &lt;a class=&quot;elementLink&quot; href=&quot;./../../process.openup.base/capabilitypatterns/develop_solution_4FBB0E6E.html&quot; guid=&quot;_RXGoodOFEdyqlogshP8l4g&quot;>Develop Solution Increment&lt;/a>&#xA;                &lt;/p>&#xA;                &lt;p style=&quot;TEXT-ALIGN: justify&quot;>&#xA;                    &lt;a class=&quot;elementLink&quot; href=&quot;./../../process.openup.base/capabilitypatterns/test_solution_D16D88FC.html&quot; guid=&quot;_buG4sdOFEdyqlogshP8l4g&quot;>Test Solution&lt;/a>&#xA;                &lt;/p>&#xA;            &lt;/td>&#xA;        &lt;/tr>&#xA;        &lt;tr>&#xA;            &lt;td class=&quot;Normal&quot; valign=&quot;top&quot; width=&quot;300&quot;>&#xA;                Minimize development costs and achieve some degree of parallelism&lt;br />&#xA;            &lt;/td>&#xA;            &lt;td class=&quot;Normal&quot; valign=&quot;top&quot; width=&quot;348&quot;>&#xA;                &lt;p style=&quot;TEXT-ALIGN: justify&quot;>&#xA;                    &lt;a class=&quot;elementLink&quot; href=&quot;./../../process.openup.base/capabilitypatterns/plan_manage_iteration_F9713A62.html&quot; guid=&quot;_oZgCsdOEEdyqlogshP8l4g&quot;>Plan and Manage Iteration&lt;/a>&lt;br />&#xA;                &lt;/p>&#xA;                &lt;p style=&quot;TEXT-ALIGN: justify&quot;>&#xA;                    &lt;a class=&quot;elementLink&quot; href=&quot;./../../process.openup.base/capabilitypatterns/develop_solution_4FBB0E6E.html&quot; guid=&quot;_RXGoodOFEdyqlogshP8l4g&quot;>Develop Solution Increment&lt;/a>&#xA;                &lt;/p>&#xA;                &lt;p style=&quot;TEXT-ALIGN: justify&quot;>&#xA;                    &lt;a class=&quot;elementLink&quot; href=&quot;./../../process.openup.base/capabilitypatterns/test_solution_D16D88FC.html&quot; guid=&quot;_buG4sdOFEdyqlogshP8l4g&quot;>Test Solution&lt;/a>&#xA;                &lt;/p>&#xA;            &lt;/td>&#xA;        &lt;/tr>&#xA;    &lt;/tbody>&#xA;&lt;/table>" longPresentationName="construction_phase_iteration,_RQi0AdONEdyqlogshP8l4g"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-ZgdHcIUeC0fczWjxdRhZmQ" name="system_wide_requirements,_AQJYp9OOEdyqlogshP8l4g" guid="-ZgdHcIUeC0fczWjxdRhZmQ" keyConsiderations="&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        When you document system-wide requirements, ensure that the needs of all of the stakeholders are represented. In&#xD;&#xA;        particular, include the needs of those who are responsible for maintaining or supporting the system after it is&#xD;&#xA;        delivered.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Typically, there are some overlaps and gray areas between system-wide requirements and other requirements work&#xD;&#xA;        products. For example, the authorization behavior of a system can be specified as use cases or as statements within&#xD;&#xA;        system-wide requirements. The overall driving need is that no important requirements are missed or duplicated, and&#xD;&#xA;        that there is an agreed upon approach for capturing and processing every type of requirement.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        System-wide requirements originate from many places. Documenting the source of the requirement is particularly&#xD;&#xA;        important when you separate externally mandated requirements.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Requirements are often thought of as &quot;Qualitative&quot; (specifying a quality or desirable characteristic) versus&#xD;&#xA;        &quot;Quantitative&quot; (specifying a quantity). Qualitative requirements can sometimes be elaborated into quantitative&#xD;&#xA;        requirements.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        A good quality requirement is one that you can verify, either through testing or some other objective evaluation.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        You must evaluate system-wide requirements for cost, schedule impact, and level of contribution to business goals.&#xD;&#xA;        Based on your evaluation, the system-wide requirements should be iteratively challenged, defended, and amended.&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>" longPresentationName="system_wide_requirements,_AQJYp9OOEdyqlogshP8l4g"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-LXsJtWauw8OXFBPA5LtlUw" name="glossary,_AQJYqdOOEdyqlogshP8l4g" guid="-LXsJtWauw8OXFBPA5LtlUw" keyConsiderations="&lt;p>&#xD;&#xA;    Although listed as an &lt;i>output from&lt;/i> and an &lt;i>input to&lt;/i> tasks associated with the requirements discipline, this&#xD;&#xA;    artifact can be updated at any time and by any role as new terms are identified. The terms defined should be used&#xD;&#xA;    according to the recorded definitions in all project documentation so that all stakeholders can clearly see that terms&#xD;&#xA;    are being used consistently.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    One of the primary decisions when developing&amp;nbsp;this artifact&amp;nbsp;is whether to have all terms in a single glossary&#xD;&#xA;    or to maintain terms in several glossaries, business terms artifacts, or models.&amp;nbsp;If terms are defined in multiple&#xD;&#xA;    places, you need to communicate all of those sources to the team and decide which take precedence.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    It may be important, even in small projects, to reference and use existing broader glossaries, business terms&#xD;&#xA;    artifacts, or data models, where they exist.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Industry- and organization-wide glossaries may be referenced, and compliance with such specific chosen standards may be&#xD;&#xA;    required.&#xD;&#xA;&lt;/p>" longPresentationName="glossary,_AQJYqdOOEdyqlogshP8l4g" refinedDescription="&lt;p>&#xD;&#xA;    This artifact&amp;nbsp;helps you avoid miscommunication by providing two essential resources:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        A central location to look for terms and abbreviations that are new to development team members&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Definitions of terms that are used in specific ways within the domain&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;p>&#xD;&#xA;    Definitions for the glossary terms come from several sources, such as requirements documents, specifications, and&#xD;&#xA;    discussions with stakeholders and domain experts.&#xD;&#xA;&lt;/p>"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-M0XmBkehezZMI-pmbjQ9SA" name="detail_use_case_scenarios,_AVhA0NOOEdyqlogshP8l4g" guid="-M0XmBkehezZMI-pmbjQ9SA" keyConsiderations="&lt;p>&#xD;&#xA;    To avoid unnecessary rework, only those use-case scenarios that are scheduled for implementation in the near term (in&#xD;&#xA;    the next iteration or two)&amp;nbsp;must be detailed.&amp;nbsp;&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Not all use-case scenarios require detailing.&#xD;&#xA;&lt;/p>" longPresentationName="detail_use_case_scenarios,_AVhA0NOOEdyqlogshP8l4g"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-p2uRMHIOQI2c6fLh6CUIbw" name="detail_system_wide_requirements,_AVhA0dOOEdyqlogshP8l4g" guid="-p2uRMHIOQI2c6fLh6CUIbw" keyConsiderations="To avoid unnecessary rework, only those requirements that are scheduled for implementation in the near term (in the next&#xD;&#xA;iteration or two)&amp;nbsp;must be detailed." longPresentationName="detail_system_wide_requirements,_AVhA0dOOEdyqlogshP8l4g"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-nIF2UE5rqiDXuJIzOZcQuA" name="create_test_cases,_AVhA0tOOEdyqlogshP8l4g" guid="-nIF2UE5rqiDXuJIzOZcQuA" keyConsiderations="&lt;p>&#xD;&#xA;    Develop test cases in parallel with requirements so that Analysts and stakeholders can agree with the specific&#xD;&#xA;    conditions of satisfaction for each requirement. The test cases act as acceptance criteria by expanding on the intent&#xD;&#xA;    of the system&amp;nbsp;through actual scenarios of use.&amp;nbsp;This allows team members to measure progress in terms of&#xD;&#xA;    passing test cases.&amp;nbsp;&#xD;&#xA;&lt;/p>" longPresentationName="create_test_cases,_AVhA0tOOEdyqlogshP8l4g"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-vyRUbVNrluvyfjsHPKp2fw" name="test_case,_AVhA1NOOEdyqlogshP8l4g" guid="-vyRUbVNrluvyfjsHPKp2fw" longPresentationName="test_case,_AVhA1NOOEdyqlogshP8l4g" refinedDescription="&lt;p>&#xD;&#xA;    A test case specifies the conditions that must be validated to enable an assessment of aspects of the system under&#xD;&#xA;    test. A test case is more formal than a test idea; typically, a test case takes the form of a specification. In less&#xD;&#xA;    formal environments, you can create test cases by identifying a unique ID, name, associated test data, and expected&#xD;&#xA;    results.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Test cases can be derived from many sources, and typically include a subset of the requirements (such as use cases,&#xD;&#xA;    performance characteristics, and reliability concerns) and other types of quality attributes. For more information on&#xD;&#xA;    types of tests and their relationships to quality test attributes, see &lt;a class=&quot;elementLinkWithType&quot;&#xD;&#xA;    href=&quot;./../../core.tech.common.extend_supp/guidances/concepts/testing_qualitative_rqmts_CAE80710.html&quot;&#xD;&#xA;    guid=&quot;_0aJ6cMlgEdmt3adZL5Dmdw&quot;>Concept: Testing Qualitative Requirements&lt;/a>.&#xD;&#xA;&lt;/p>"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-fkv_x4ovUGtM8VsssQ3kdg" name="work_items_list,_4DFEYZigEeGlkdGl1HQlDA" guid="-fkv_x4ovUGtM8VsssQ3kdg" keyConsiderations="&lt;p>&#xD;&#xA;    Work Items should contain estimates. See guidelines on managing work items and agile estimation.&#xD;&#xA;&lt;/p>" longPresentationName="work_items_list,_4DFEYZigEeGlkdGl1HQlDA" refinedDescription="&lt;p>&#xD;&#xA;    This artifact provides a focal point for the entire team:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        It provides one list containing all requests for additional capabilities or enhancement for that application. Note&#xD;&#xA;        that some of these requests may never be implemented, or be implemented in later projects.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        It provides one list of all the work to be prioritized, estimated, and assigned within the project. The risk list&#xD;&#xA;        is prioritized separately.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        It provides one place to go to for the development team to understand what&amp;nbsp;micro-increments&amp;nbsp;need to be&#xD;&#xA;        delivered, get references to material required to carry out the work, and report progress made.&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;p>&#xD;&#xA;    These are the typical work items that go on this list:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Use cases (and references to use-case specifications)&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        System-wide requirements&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Changes and enhancement requests&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Defects&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Development tasks&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;p>&#xD;&#xA;    Work items can be very large in scope, especially when capturing requests for enhancements, such as &quot;Support Financial&#xD;&#xA;    Planning&quot; for a personal finance application. To allow the application to be developed in micro-increments, work items&#xD;&#xA;    are analyzed and broken down into smaller work items so that they can be assigned to an iteration, such as a use-case&#xD;&#xA;    scenario for&amp;nbsp;&quot;Calculate Net Worth&quot;. Further breakdown may be required to identify suitable tasks to be assigned to&#xD;&#xA;    developers, such as &quot;Develop UI for Calculate Net Worth&quot;. This means that work items often have parent/child&#xD;&#xA;    relationships, where the lowest level is a specification and tracking device for micro-increments.&#xD;&#xA;&lt;/p>"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-mx51ATVqsnhmw5TcEQIYYw" name="plan_deployment,_DZttwJlXEeGlkdGl1HQlDA" guid="-mx51ATVqsnhmw5TcEQIYYw" longPresentationName="plan_deployment,_DZttwJlXEeGlkdGl1HQlDA" refinedDescription="&lt;p>&#xD;&#xA;    Because a Deployment Engineer is responsible for accepting the results of one or more development team members and deploying those&#xD;&#xA;    integrated releases into the production environment, it is important for all parties to agree on the details of a&#xD;&#xA;    particular release. The Deployment Plan documents, in one place, all the information that will be consumed by the&#xD;&#xA;    Deployment Engineer before and during the deployment to production of a particular release package.&#xD;&#xA;&lt;/p>"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-noiWjBdDPWJmSF3l73Ti7Q" name="deployment_engineer,_DZttwZlXEeGlkdGl1HQlDA" guid="-noiWjBdDPWJmSF3l73Ti7Q" longPresentationName="deployment_engineer,_DZttwZlXEeGlkdGl1HQlDA" refinedDescription="&lt;p>&#xD;&#xA;    A Deployment Engineer&amp;nbsp;assists the&amp;nbsp;Deployment Manager who is responsible to senior management for the&#xD;&#xA;    successful deployment of integrated or stand-alone releases into production. This team member role is critical to the&#xD;&#xA;    safety of the production environment and helps prevent the introduction of bad or untested code into production&amp;nbsp;on&#xD;&#xA;    which the organization's internal and external Customers depend. Deployment Engineers support the Deployment Manager in&#xD;&#xA;    the mission to continually lead, facilitate, and coordinate synchronized releases by using the program to&#xD;&#xA;    maximize value delivered to their program Customers.&#xD;&#xA;&lt;/p>"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-f_uaW-2HSuS-3uC5Ni_BYw" name="deployment_plan,_DZttxZlXEeGlkdGl1HQlDA" guid="-f_uaW-2HSuS-3uC5Ni_BYw" longPresentationName="deployment_plan,_DZttxZlXEeGlkdGl1HQlDA" refinedDescription="&lt;p>&#xD;&#xA;    The Deployment Plan should contain the unique instructions for deploying a particular version of a product. By &quot;unique&#xD;&#xA;    instructions&quot; we mean those things that are not part of a Deployment Engineer's normal procedures. Rather, they often&#xD;&#xA;    are specific procedures and timing constraints that a Deployment Engineer should be aware of as they are rolling out a&#xD;&#xA;    particular release.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    While&amp;nbsp;a draft version of the&amp;nbsp;Deployment Plan is typically developed by a development team, the Deployment&#xD;&#xA;    Engineer is responsible for its contents and existence.&amp;nbsp;A Deployment Plan&amp;nbsp;normally consists of the following&#xD;&#xA;    sections:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        The scope of the release and a general overview of the capabilities to be deployed&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        The timing and dependencies for deploying components to various nodes&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        The risks or issues associated with the release based on a risk assessment&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        The customer organization, stakeholders, and End User community that will be impacted by the release&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        The person or persons who have the authority to approve the release as &quot;ready for production&quot;&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        The development team members responsible for delivering the release package to the Deployment Manager, along with&#xD;&#xA;        contact information&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        The approach for transitioning the release package to the Deployment Engineer, including appropriate communications&#xD;&#xA;        protocols and escalation procedures&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        The success criteria for this deployment; in other words, how will the Deployment Engineer know that the release is&#xD;&#xA;        successful so it can report success&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-FcJEVCc4jEBKZPGYLseZkQ" name="backout_plan,_DaTjoplXEeGlkdGl1HQlDA" guid="-FcJEVCc4jEBKZPGYLseZkQ" longPresentationName="backout_plan,_DaTjoplXEeGlkdGl1HQlDA" refinedDescription="&lt;p>&#xD;&#xA;    While someone on the development team normally authors a draft version of the Backout Plan, the Deployment Engineer is&#xD;&#xA;    ultimately responsible for its contents and existence. A Backout Plan typically answers the following questions:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Under what circumstances will a rollback be required? Or conversely, under what circumstances will the deployment&#xD;&#xA;        be considered a success?&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        What is the time period within which a rollback can take place?&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Which authorizing agent will make the decision to revert?&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Who will perform the rollback and how soon after the decision has been made will the rollback be performed?&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        What procedures (manual and automated) will be followed to execute the rollback?&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        What other contingency measures or available workarounds should be considered?&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        What is the expected time required to perform a reversion?&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        What are the communication procedures required in the event of a backout?&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Has the Backout Plan been successfully tested?&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-M8RcfIWzEdq2ZYUeLZoX4Q" name="release_communications,_DaTjpZlXEeGlkdGl1HQlDA" guid="-M8RcfIWzEdq2ZYUeLZoX4Q" longPresentationName="release_communications,_DaTjpZlXEeGlkdGl1HQlDA" refinedDescription="&lt;p>&#xD;&#xA;    Sometimes, depending on the product user base, separate communiques might need to be prepared for each stakeholder&#xD;&#xA;    group. In that case, this artifact should specify the different groups to which communications are directed, the method&#xD;&#xA;    of communication (e.g., email, text or pager message, bulletin, newsletter, phone message, etc.). All communiques&#xD;&#xA;    should be prepared in advance so that it is a matter of disseminating information when the release to production has&#xD;&#xA;    been determined to be successful.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Also included in this artifact is a listing of the responsible parties who will execute the communications when a&#xD;&#xA;    successful release has been declared (normally the Deployment Engineer), as well as the timing and dependencies of the&#xD;&#xA;    communiques.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    While there is no prescribed format for the Release Communications artifact, each communique should indicate the&#xD;&#xA;    preferred delivery mechanisms (e.g., beeper notification, telephone calls, a posting to an internal release website,&#xD;&#xA;    live or pre-recorded presentations by senior management, etc.) and generally answer the following questions:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Who are the parties (Stakeholders) that are interested in knowing that a release to production has taken place?&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        What specifically (features, functions, components) has been placed into production?&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Why is this release valuable to stakeholders and what business purpose does it serve?&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Where is the product available (on which platforms, geographical locations, business units, etc.)?&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        How can the stakeholders access the system and under what circumstances?&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        When was the product released (or when will it be released if the release date is in the future)?&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>"/>
  <org.eclipse.epf.uma:DescriptorDescription xmi:id="-9OywHIlNMFgKcxL-epLd3g" name="release,_DaTjqJlXEeGlkdGl1HQlDA" guid="-9OywHIlNMFgKcxL-epLd3g" longPresentationName="release,_DaTjqJlXEeGlkdGl1HQlDA" refinedDescription="&lt;p>&#xD;&#xA;    A Release consists of integrated, compiled code that runs cleanly, independently, and in its entirety. This is an&#xD;&#xA;    important rule because in order to be released or even &quot;potentially shippable,&quot; a Release increment must be able to&#xD;&#xA;    stand on its own, otherwise it is not shippable. Releases&amp;nbsp;can be created at either the program or team level.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    There are three potential uses for a Release:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;strong>It is not used outside of the program:&lt;/strong> It has been produced to minimize risks linked to technology&#xD;&#xA;        and a program's capability to integrate components and to produce a Build. This situation usually happens at the&#xD;&#xA;        beginning of a new product lifecycle.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;strong>It is used by Beta Customers and the Program Manager:&lt;/strong> It allows End Users to test it in a Beta&#xD;&#xA;        test environment, which provides immediate feedback and reduces risks associated with user interface ergonomics.&#xD;&#xA;        Customer feedback will influence the Program Backlog for later consideration.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;strong>It is deployed or shipped and used by End Users:&lt;/strong> This result provides immediate value to the End&#xD;&#xA;        Users.&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;p>&#xD;&#xA;    In many organizations, a program Release typically is timeboxed to 2 to 3 months of development effort and 2 to 4 weeks&#xD;&#xA;    of hardening which results in a scheduled release approximately every 90 days. Releases for individual Development&#xD;&#xA;    Teams usually occur more often than those for programs, but there are no hard and fast rules regarding how often&#xD;&#xA;    releases should be scheduled. The only requirement is that working software should be delivered &quot;frequently&quot; by both&#xD;&#xA;    development teams and programs. Although the example timeframe described above is arbitrary, empirical evidence&#xD;&#xA;    suggests it is about right for most companies and fits nicely into quarterly planning cycles.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Each Release has a set of release objectives and a projected delivery date; it also has a planned number of Sprint/Iterations.&#xD;&#xA;    For example, a brief description of a release might be: &quot;The goal of Release 2 is to provide B2B scheduling capability&#xD;&#xA;    for the Ordering and Logistics Department. The Release is targeted for June 31 and will consist of five 2-week Feature&#xD;&#xA;    Development Sprint/Iterations and&amp;nbsp;one 2-week Release Sprint/Iteration.&quot;&#xD;&#xA;&lt;/p>"/>
</xmi:XMI>
