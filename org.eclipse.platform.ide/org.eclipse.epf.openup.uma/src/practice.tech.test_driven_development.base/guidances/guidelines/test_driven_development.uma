<?xml version="1.0" encoding="UTF-8"?><org.eclipse.epf.uma:ContentDescription xmlns:epf="http://www.eclipse.org/epf" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmlns:xmi="http://www.omg.org/XMI" longPresentationName="new_guideline,_5s_DUJ03EdyQ3oTO93enUw" xmi:version="2.0" epf:version="1.5.1" xmi:id="-mItcFA1WMTAyJvkqMrXuMQ" name="new_guideline,_5s_DUJ03EdyQ3oTO93enUw" guid="-mItcFA1WMTAyJvkqMrXuMQ" changeDate="2008-10-14T19:03:34.000+0200" version="7.2.0">
  <mainDescription>&lt;h3&gt;&#xD;
    Introduction&#xD;
&lt;/h3&gt;&#xD;
&lt;p&gt;&#xD;
    With Test Driven Development (TDD) you do detailed design in a just-in-time (JIT) manner via writing a single test&#xD;
    before writing just enough production code to fulfill that test. When you have new functionality to add to your system,&#xD;
    perform the following steps:&#xD;
&lt;/p&gt;&#xD;
&lt;ol&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;strong&gt;Quickly add a developer test&lt;/strong&gt;. You need just enough implementation code to fail.&amp;nbsp; For example,&#xD;
        a new method about to be added to a class could be created that just throws a fatal exception.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;strong&gt;Run your tests&lt;/strong&gt;. You will typically run the complete test suite, although for sake of speed you may&#xD;
        decide to run only a subset. The goal is to ensure that the new test does in fact fail.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;strong&gt;Update your production code&lt;/strong&gt;. The goal is to add just enough functionality so that&amp;nbsp;the code&#xD;
        passes the new test.&amp;nbsp;&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;strong&gt;Run your test suite again&lt;/strong&gt;. If the tests fail you need to update your functional code and retest.&#xD;
        Once the tests pass, start over.&#xD;
    &lt;/li&gt;&#xD;
&lt;/ol&gt;&lt;br /&gt;&#xD;
&lt;p&gt;&#xD;
    &lt;img height="600" alt="Test First Design Flow" src="resources/test_first_design.jpg" width="294" /&gt;&#xD;
&lt;/p&gt;&#xD;
&lt;h4&gt;&#xD;
    Why TDD?&#xD;
&lt;/h4&gt;&#xD;
&lt;p&gt;&#xD;
    A significant advantage of TDD is that it enables you to take small steps when writing software, which is not only&#xD;
    safer it is also far more productive than writing code in large steps. For example, assume you add some new functional&#xD;
    code, compile, and test it. Chances are pretty good that your tests will be broken by defects that exist in the new&#xD;
    code. It is much easier to find, and then fix, those defects if you've written five new lines of code than fifty lines.&#xD;
    The implication is that the faster your compiler and regression test suite, the more attractive it is to proceed in&#xD;
    smaller and smaller steps.&#xD;
&lt;/p&gt;&#xD;
&lt;p&gt;&#xD;
    There are other common testing strategies (listed here in order of effectiveness).&#xD;
&lt;/p&gt;&#xD;
&lt;ol&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;strong&gt;Write several tests first&lt;/strong&gt;. This is a variant of TDD where you write more than one test before&#xD;
        writing just enough production code to fulfill those tests. The advantage is that you don't need to build your&#xD;
        system as often, potentially saving time. It has the disadvantage that you will write more production code at once,&#xD;
        increasing the difficulty of finding the cause of new bugs.&#xD;
    &lt;/li&gt;&#xD;
    &lt;li&gt;&#xD;
        &lt;strong&gt;Test after the fact&lt;/strong&gt;. With this approach you write some production code then you write enough&#xD;
        testing code to validate it. This has the advantage that you're at least still validating the code but has the&#xD;
        disadvantage that you lose the design benefit inherent in writing the testing code first.&#xD;
    &lt;/li&gt;&#xD;
&lt;/ol&gt;&#xD;
&lt;p&gt;&#xD;
    An underlying assumption of TFD is that a unit-testing framework is available. Agile software developers often use the&#xD;
    xUnit family of open source tools, such as &lt;a href="http://www.junit.org/"&gt;&lt;strong&gt;&lt;u&gt;&lt;font&#xD;
    color="#0000ff"&gt;JUnit&lt;/font&gt;&lt;/u&gt;&lt;/strong&gt;&lt;/a&gt; or &lt;a href="http://www.vbunit.org/"&gt;&lt;strong&gt;&lt;u&gt;&lt;font&#xD;
    color="#0000ff"&gt;VBUnit&lt;/font&gt;&lt;/u&gt;&lt;/strong&gt;&lt;/a&gt;, although commercial tools are also viable options.&#xD;
&lt;/p&gt;</mainDescription>
</org.eclipse.epf.uma:ContentDescription>