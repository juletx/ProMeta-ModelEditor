<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:PracticeDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="-nV4dgKPmOiwZnl6nUoKqQw" name="new_practice,_FUDtMB4mEd2bS8fFOQ7WWA" guid="-nV4dgKPmOiwZnl6nUoKqQw" changeDate="2008-08-14T12:23:09.000+0200" version="7.5.0" mainDescription="&lt;p>&#xD;&#xA;    Test driven development (TDD) is the practice of writing developer tests and implementation code concurrently and at a&#xD;&#xA;    very fine level of granularity.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    In test driven design, the developer first writes a small test to validate a small change, runs the test to ensure that&#xD;&#xA;    it fails (a sanity check), and then writes just enough implementation code to make that developer test run&#xD;&#xA;    successfully. This cycle is short and it rarely goes beyond 10 minutes. In each cycle, the tests come first. Once a&#xD;&#xA;    test is done, the developer goes on to the next test until there are no more tests to be written for the implementation&#xD;&#xA;    of the work item currently under development.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    &lt;img alt=&quot;file:///C:/Documents%20and%20Settings/Administrator/Desktop/tdd_flow.jpg&quot; src=&quot;resources/tdd_flow.jpg&quot; />&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    The practice of test driven development changes how the developer thinks. Tests are not written as an afterthought.&#xD;&#xA;    Instead, developer tests are written as part of the everyday, every minute way of building software.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    What are the advantages of test driven design?&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ol>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Assumptions in the design are analyzed before the implementation code is written. To write developer tests, an&#xD;&#xA;        examination must be made of the behavior of each piece of code to be written. Correct and incorrect behaviors must&#xD;&#xA;        be defined. In a way, writing the tests before the code can be considered a version of detailed design.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Code units designed for testability up front are cleaner and more loosely coupled.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Errors are found earlier. Errors or gaps in the requirements and design are identified before coding begins, when&#xD;&#xA;        it could be tempting to move ahead based on assumptions.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        A clearer collaboration strategy between the developer and others that might be responsible for the requirements,&#xD;&#xA;        architecture, and design is put in place. During the creation of the tests, there must be a meeting of the minds as&#xD;&#xA;        to what has been specified. After that, the implementation can carry on with confidence that there is a shared&#xD;&#xA;        vision of what the code should do.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        There are unambiguous criteria for completion of the code. When the tests conclude successfully, the code is&#xD;&#xA;        working as specified. Non-functional quality dimensions can be dealt with separately, but there is a clear moment&#xD;&#xA;        when the code behaves correctly.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        The technique drives the developer to work in smaller increments with faster quality feedback. At any time, the&#xD;&#xA;        developer is just one test away from having error-free code.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        There is a separation of concerns and effort between getting code working and improving the quality of the code&#xD;&#xA;        that already runs correctly. Separating out these two areas of concern provides focus and time management support&#xD;&#xA;        to a developer. In one pass over the implementation, the developer makes it pass the tests as simply as possible,&#xD;&#xA;        and then in a subsequent pass, looks for areas to improve.&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ol>&#xD;&#xA;&lt;p>&#xD;&#xA;    See &lt;a class=&quot;elementLink&quot;&#xD;&#xA;    href=&quot;./../../../practice.tech.test_driven_development.base/guidances/supportingmaterials/using_tdd_in_context_2ADBB50B.html&quot;&#xD;&#xA;     guid=&quot;_vLvAUGjFEd2PJ-nlV-86WA&quot;>Using TDD in context&lt;/a> for more information.&#xD;&#xA;&lt;/p>" longPresentationName="new_practice,_FUDtMB4mEd2bS8fFOQ7WWA" additionalInfo="&lt;p>&#xD;&#xA;    If you are just getting started with TDD or developer testing in general, you will need to know why developer testing&#xD;&#xA;    is a good idea, and the basics of what makes good developer tests. A good starting place is this &lt;a&#xD;&#xA;    href=&quot;http://itc.conversationsnetwork.org/shows/detail301.html&quot; target=&quot;_blank&quot;>Kent Beck presentation&lt;/a>. Kent Beck&#xD;&#xA;    is the creator of Extreme Programming, which is where TDD was originally defined.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Here are some useful links to expand your understanding of TDD. Make use of these as you learn to enact TDD. Some of&#xD;&#xA;    these links are also good resources for on-going support and information.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        The &lt;a href=&quot;http://en.wikipedia.org/wiki/Test_driven_development&quot; target=&quot;_blank&quot;>TDD: Wikipedia&lt;/a> entry gives&#xD;&#xA;        an overview of TDD and links to other TDD resources.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;a href=&quot;http://blog.james-carr.org/?p=44&quot; target=&quot;_blank&quot;>James Carr's TDD Anti-pattern Catalogue&lt;/a> lists some&#xD;&#xA;        things to avoid when adopting TDD.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        The &lt;a href=&quot;http://blog.james-carr.org/?p=44&quot; target=&quot;_blank&quot;>TDD Mailing List&lt;/a> is a discussion forum for TDD&#xD;&#xA;        questions and issues.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        &lt;a href=&quot;http://www.testdriven.com/&quot; target=&quot;_blank&quot;>Testdriven.com&lt;/a> is a developer testing site with a wealth&#xD;&#xA;        of information, news, and partner links about developer testing.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Read the TDD whitepaper &lt;a href=&quot;http://www.agiledata.org/essays/tdd.html&quot; target=&quot;_blank&quot;>Introduction to TDD.&lt;/a>&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;p>&#xD;&#xA;    Once you are familiar with the basics of TDD, select various tasks to view more detail about what needs to be done to&#xD;&#xA;    perform the task. If you will be creating a capability pattern or delivery process that includes TDD, see &lt;a&#xD;&#xA;    class=&quot;elementLink&quot;&#xD;&#xA;    href=&quot;./../../../practice.tech.test_driven_development.base/guidances/supportingmaterials/using_tdd_in_context_2ADBB50B.html&quot;&#xD;&#xA;     guid=&quot;_vLvAUGjFEd2PJ-nlV-86WA&quot;>Using TDD in context&lt;/a>. This shows one example of how TDD can be used in conjunction&#xD;&#xA;    with other activities and capability patterns to create a pattern for developing software. This is only one possible&#xD;&#xA;    example: there are many was to use TDD with other development practices.&#xD;&#xA;&lt;/p>" problem="&lt;p>&#xD;&#xA;    The test driven development practice reduces time to market by reducing the amount of time needed to integrate and&#xD;&#xA;    stabilize builds. It improves productivity by finding and fixing errors close to the time that they are introduced. And&#xD;&#xA;    it increases the overall quality of the software by guaranteeing that all new code has been tested, and all existing&#xD;&#xA;    code has been regression tested, prior to check-in.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Developers use TDD to create the &lt;a class=&quot;elementLink&quot;&#xD;&#xA;    href=&quot;./../../../core.tech.common.extend_supp/workproducts/implementation_AFFEFC46.html&quot;&#xD;&#xA;    guid=&quot;_JqYbgJ01EdyQ3oTO93enUw&quot;>Implementation&lt;/a> and the &lt;a class=&quot;elementLink&quot;&#xD;&#xA;    href=&quot;./../../../core.tech.common.extend_supp/workproducts/developer_test_6A91CE05.html&quot;&#xD;&#xA;    guid=&quot;_kh9FcJ02EdyQ3oTO93enUw&quot;>Developer Test&lt;/a>s.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    See the &lt;a class=&quot;elementLink&quot;&#xD;&#xA;    href=&quot;./../../../practice.tech.test_driven_development.base/guidances/roadmaps/adopt_tdd_practice_7D642D12.html&quot;&#xD;&#xA;    guid=&quot;_8yG48JRqEdyrdaw_xGakyw&quot;>How to Adopt the Test Driven Development Practice&lt;/a> for information on navigating the&#xD;&#xA;    TDD Practice.&#xD;&#xA;&lt;/p>" background="&lt;p>&#xD;&#xA;    TDD was originally part of Kent Beck's Extreme Programming process. It's now also used in many other Agile and&#xD;&#xA;    non-Agile contexts.&#xD;&#xA;&lt;/p>"/>
