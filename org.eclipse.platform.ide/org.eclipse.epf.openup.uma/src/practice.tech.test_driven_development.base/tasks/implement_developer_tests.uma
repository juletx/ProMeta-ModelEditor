<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="-UW-yTFk3AppqcGGU-Px63A" name=",_znlIcJR9EdyVKbgqUOtqQA" guid="-UW-yTFk3AppqcGGU-Px63A" changeDate="2010-09-15T21:44:18.858+0200" version="7.2.0" mainDescription="&lt;p>&#xD;&#xA;    Developer testing is different from other forms of testing in that it is based on the expected behavior of code units&#xD;&#xA;    rather than being directly based on the system requirements.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    It is best to do this at a small scale, much smaller than the complete code base to be authored by a developer over the&#xD;&#xA;    course of an iteration. This can be done for one operation, one field added to a user interface, one stored procedure,&#xD;&#xA;    etc. As the code base is incrementally built, new tests will be authored and existing tests might be revisited to test&#xD;&#xA;    additional behavior.&#xD;&#xA;&lt;/p>" keyConsiderations="&lt;ol>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Automate tests via a unit regression testing tool (for example, xUnit) so that tests may be run by developers&#xD;&#xA;        whenever they make changes to the code.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Test to the risk of the implementation element. For example, the more critical an element is, the more important it&#xD;&#xA;        is to test it thoroughly.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Pair with&amp;nbsp;team members with testing skills&amp;nbsp;in all steps of this task to gain insight on testing and&#xD;&#xA;        quality considerations.&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ol>&#xD;&#xA;&lt;p>&#xD;&#xA;    The&amp;nbsp;[Project Work] is implicitly used in implementation tasks to manage which requirements or change requests are&#xD;&#xA;    being realized in the code.&#xD;&#xA;&lt;/p>" longPresentationName=",_znlIcJR9EdyVKbgqUOtqQA" purpose="Prepare to validate an implementation element (e.g. an operation, a class, a stored procedure) through unit testing. The&#xD;&#xA;result is one or more new developer tests." alternatives="Rely on acceptance tests to validate your software. This will likely be time consuming, late, and not as effective as&#xD;&#xA;developer testing in identifying bugs and finding their location in the code.">
  <sections xmi:id="_C_j_EJR-EdyVKbgqUOtqQA" name="Refine scope and identify the test(s)" guid="_C_j_EJR-EdyVKbgqUOtqQA" variabilityBasedOnElement="_C_j_EJR-EdyVKbgqUOtqQA" sectionDescription="&lt;p>&#xD;&#xA;    Select the increment of work to be tested and identify developer test(s)&amp;nbsp;to verify that the software&#xD;&#xA;    implementation&amp;nbsp;being developed behaves correctly. One source for the expected behavior for an implementation&#xD;&#xA;    element is the software design.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    In identifying the&amp;nbsp;tests or in any other part of this task, consider collaborating with a team member who is&#xD;&#xA;    well-versed in the issues of testing.&#xD;&#xA;&lt;/p>"/>
  <sections xmi:id="_Es64wJR-EdyVKbgqUOtqQA" name="Write the test setup" guid="_Es64wJR-EdyVKbgqUOtqQA" variabilityBasedOnElement="_Es64wJR-EdyVKbgqUOtqQA" sectionDescription="To successfully run a test the system must be in a known state so that the correct behavior can be defined. Implement the&#xD;&#xA;setup logic that must be performed as part of the developer test."/>
  <sections xmi:id="_Fm4moJR-EdyVKbgqUOtqQA" name="Define the expected results" guid="_Fm4moJR-EdyVKbgqUOtqQA" variabilityBasedOnElement="_Fm4moJR-EdyVKbgqUOtqQA" sectionDescription="&lt;p>&#xD;&#xA;    Define the expected results of each test so that it can be verified.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    After a test runs, you need to be able to compare the results of running the test against what was expected to happen.&#xD;&#xA;    The test is successful when the actual results match the expected results.&#xD;&#xA;&lt;/p>"/>
  <sections xmi:id="_GZaPwJR-EdyVKbgqUOtqQA" name="Write the test logic" guid="_GZaPwJR-EdyVKbgqUOtqQA" variabilityBasedOnElement="_GZaPwJR-EdyVKbgqUOtqQA" sectionDescription="Write the steps that perform the actual test(s)."/>
  <sections xmi:id="_IMxq0JR-EdyVKbgqUOtqQA" name="Define the test response" guid="_IMxq0JR-EdyVKbgqUOtqQA" variabilityBasedOnElement="_IMxq0JR-EdyVKbgqUOtqQA" sectionDescription="Define the information the test(s) must produce to successfully indicate success or failure. Consider if a response of True&#xD;&#xA;or False is sufficient, or if a detailed message should be logged as well."/>
  <sections xmi:id="_JAiqEJR-EdyVKbgqUOtqQA" name="Write clean-up code" guid="_JAiqEJR-EdyVKbgqUOtqQA" variabilityBasedOnElement="_JAiqEJR-EdyVKbgqUOtqQA" sectionDescription="Identify, and then implement, the steps to be followed in order to restore the environment to the original state for each&#xD;&#xA;test. The goal is to ensure that there are no side effects from running the tests."/>
  <sections xmi:id="_KkDrQJR-EdyVKbgqUOtqQA" name="Test the test" guid="_KkDrQJR-EdyVKbgqUOtqQA" variabilityBasedOnElement="_KkDrQJR-EdyVKbgqUOtqQA" sectionDescription="&lt;p>&#xD;&#xA;    Verify that each developer test works correctly. To do this:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Run the test(s), observe their behavior, and fix any defects in the tests.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Ensure that the expected results are defined properly and that they're being checked correctly.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Check the clean-up logic for each test.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Ensure that each developer test works within your test suite framework.&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>"/>
</org.eclipse.epf.uma:TaskDescription>
