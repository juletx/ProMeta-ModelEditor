<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:TaskDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="-UaDGd7K2rQIFMwCrDuqQKQ" name=",_Ht-z8JfJEdyZkIR-s-Y8wQ" guid="-UaDGd7K2rQIFMwCrDuqQKQ" changeDate="2010-09-15T21:46:02.202+0200" version="7.2.0" mainDescription="&lt;p>&#xD;&#xA;    Usually, this task is focused on a specific implementation&amp;nbsp;element, such as a class or component, but it does not&#xD;&#xA;    need to be.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    A portion of the design is implemented by performing this task. This task can be performed any number of times during&#xD;&#xA;    an iteration. In fact it is best to do this task in as small a scope as possible to tighten the loop between it and&#xD;&#xA;    related tasks involving developer testing and consideration of the design.&#xD;&#xA;&lt;/p>" keyConsiderations="&lt;p>&#xD;&#xA;    It is best when developer tests already exist so there is an unambiguous definition of what behavior is considered&#xD;&#xA;    correct. The implementation should be immediately tested.&#xD;&#xA;&lt;/p>The [Project Work]&amp;nbsp; is implicitly used in implementation tasks to manage which requirements or change requests are&#xD;&#xA;being realized in the code.&lt;br />" longPresentationName=",_Ht-z8JfJEdyZkIR-s-Y8wQ" purpose="&lt;p>&#xD;&#xA;    The purpose of this task is to produce an implementation for part of the solution (such as a class or component), or to&#xD;&#xA;    fix one or more defects. The result is typically new or modified source code, which is&amp;nbsp;referred to the&#xD;&#xA;    implementation.&#xD;&#xA;&lt;/p>">
  <sections xmi:id="_RiBg4JfJEdyZkIR-s-Y8wQ" name="Determine a strategy" guid="_RiBg4JfJEdyZkIR-s-Y8wQ" variabilityBasedOnElement="_RiBg4JfJEdyZkIR-s-Y8wQ" sectionDescription="&lt;p>&#xD;&#xA;    Determine a strategy based on the software design and developer tests&amp;nbsp;for how you are going to implement the&#xD;&#xA;    solution. The fundamental options are:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ol>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Apply existing, reusable assets.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Model the design in detail and generate the source code (by model transformation).&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Write the source code.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Any combination of the above.&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ol>"/>
  <sections xmi:id="_SW1pAJfJEdyZkIR-s-Y8wQ" name="Identify opportunities for reuse" guid="_SW1pAJfJEdyZkIR-s-Y8wQ" variabilityBasedOnElement="_SW1pAJfJEdyZkIR-s-Y8wQ" sectionDescription="&lt;p>&#xD;&#xA;    Identify existing code or other implementation elements that can be reused in the portion of the implementation that&#xD;&#xA;    you are creating or changing. A comprehensive understanding of the overall design is helpful, because it is best to&#xD;&#xA;    leverage reuse opportunities when you have a thorough understanding of the proposed solution.&#xD;&#xA;&lt;/p>"/>
  <sections xmi:id="_IVaTAJ-uEdyHNcWzRYqQMg" name="Transform design into implementation" guid="_IVaTAJ-uEdyHNcWzRYqQMg" variabilityBasedOnElement="_IVaTAJ-uEdyHNcWzRYqQMg" sectionDescription="&lt;p>&#xD;&#xA;    If you are using sophisticated modeling tools, you should be able to generate a portion of the required source code&#xD;&#xA;    from the model. Note that programming is&amp;nbsp;commonly required to complete the implementation after the design model&#xD;&#xA;    has been transformed into code.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Even without tools, there is&amp;nbsp;typically some amount of code that can be created by rote by examining the design and&#xD;&#xA;    developer tests.&#xD;&#xA;&lt;/p>"/>
  <sections xmi:id="_TadCIJfJEdyZkIR-s-Y8wQ" name="Write source code" guid="_TadCIJfJEdyZkIR-s-Y8wQ" variabilityBasedOnElement="_TadCIJfJEdyZkIR-s-Y8wQ" sectionDescription="&lt;p>&#xD;&#xA;    Write the source code to make the implementation conform to the design and expected behavior. You should strive to&#xD;&#xA;    reuse and/or generate code wherever possible, but you will still need to do some programming. To do so, consider the&#xD;&#xA;    following:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Examine the technical requirements. Because some requirement information does not translate directly into your&#xD;&#xA;        design you should examine the requirement(s) to ensure that they are fully realized in the implementation.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Refactor your code to improve its design. Refactoring is a technique where you improve the quality of your code via&#xD;&#xA;        small, safe changes.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Tune the results of the existing implementation by improving performance, the user interface, security, and other&#xD;&#xA;        nonfunctional areas.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Add missing details, such as completing the logic of operations or adding supporting classes and data structures&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Handle boundary conditions.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Deal with unusual circumstances or error states.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Restrict behavior (preventing users or client code from executing illegal flows, scenarios, or combinations of&#xD;&#xA;        options).&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Add critical sections for multi-threaded or re-entrant code.&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;p>&#xD;&#xA;    Though many different considerations are listed here, there is one clear way to know when the source code is done. The&#xD;&#xA;    solution has been implemented when it passes the developer tests. Any other considerations can be taken care of in a&#xD;&#xA;    refactoring pass over the code to improve it once it is complete and correct.&#xD;&#xA;&lt;/p>"/>
  <sections xmi:id="_WpB28JfJEdyZkIR-s-Y8wQ" name="Evaluate the implementation" guid="_WpB28JfJEdyZkIR-s-Y8wQ" variabilityBasedOnElement="_WpB28JfJEdyZkIR-s-Y8wQ" sectionDescription="&lt;p>&#xD;&#xA;    Verify that the implementation is fit for its purpose. Examine the code for its suitability to perform its intended&#xD;&#xA;    function. This is a quality assurance step that you perform in addition to testing which is described in other tasks.&#xD;&#xA;    Consider these strategies:&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;ul>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Pair programming. By pairing to implement the code in the first place, you effectively evaluate the code as its&#xD;&#xA;        being written.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Read through the code for common mistakes. Consider keeping a checklist of common mistakes that you make, as a&#xD;&#xA;        reminder reference.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Use tools to check for implementation errors and inappropriate code. For example, use a static code rule checker or&#xD;&#xA;        set the compiler to the most detailed warning level.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Use tools that can visualize the code. Code visualization, such as the UML visualizations in the Eclipse IDE, help&#xD;&#xA;        developers identify issues such as excessive coupling or circular dependencies.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Perform informal, targeted code inspections. Ask colleagues to review small critical sections of code and code with&#xD;&#xA;        significant churn. Avoid reviewing large sections of code.&#xD;&#xA;    &lt;/li>&#xD;&#xA;    &lt;li>&#xD;&#xA;        Use&amp;nbsp;a tester to ensure the implementation is testable and understandable to testing resources.&#xD;&#xA;    &lt;/li>&#xD;&#xA;&lt;/ul>&#xD;&#xA;&lt;p>&#xD;&#xA;    Improve the implementation based on the results of these evaluations.&#xD;&#xA;&lt;/p>"/>
  <sections xmi:id="_XjAL4JfJEdyZkIR-s-Y8wQ" name="Communicate significant decisions" guid="_XjAL4JfJEdyZkIR-s-Y8wQ" variabilityBasedOnElement="_XjAL4JfJEdyZkIR-s-Y8wQ" sectionDescription="&lt;p>&#xD;&#xA;    Communicate the impact of unexpected changes to the design and requirements.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    The issues and constraints that you uncover when you implement the system must be communicated to the team. The impact&#xD;&#xA;    of issues discovered during implementation must be incorporated into future decisions. If appropriate, use&amp;nbsp; the&#xD;&#xA;    change management process to reflect ambiguities that you identified and resolved in the implementation so they can be&#xD;&#xA;    tested and you can manage&amp;nbsp;stakeholder expectations appropriately. Similarly,&amp;nbsp;leverage the design process to&#xD;&#xA;    update the design to reflect new constraints and issues uncovered during implementation to be sure that the new&#xD;&#xA;    information is communicated to other developers.&#xD;&#xA;&lt;/p>&#xD;&#xA;&lt;p>&#xD;&#xA;    Usually, there is no need for a change request if the required change is small and the same person is designing and&#xD;&#xA;    implementing the code element. That individual can make the design change directly. If the required change has a broad&#xD;&#xA;    impact, it may be necessary to communicate that change to the other team members through a change request.&#xD;&#xA;&lt;/p>"/>
</org.eclipse.epf.uma:TaskDescription>
