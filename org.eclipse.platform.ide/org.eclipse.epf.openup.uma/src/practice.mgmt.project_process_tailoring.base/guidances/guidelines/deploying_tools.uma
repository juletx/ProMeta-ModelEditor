<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="-b265-u-xbE-b8A-HB3Pggg" name="new_guideline,_A1qOACu3Ed-UrP371xHUyw" guid="-b265-u-xbE-b8A-HB3Pggg" changeDate="2010-03-10T17:49:56.000+0100" version="7.5.0" mainDescription="&lt;h3>&#xA;    Install the Tool on the Server&#xA;&lt;/h3>&#xA;&lt;p>&#xA;    Identify what other software is required for the specific tool to work, and install this software. For example, a tool&#xA;    may require a database management system (DBMS) be installed first.&lt;br />&#xA;    &lt;br />&#xA;    When you have installed the support software, you can install the tool on the server.&#xA;&lt;/p>&#xA;&lt;h3>&#xA;    Customize the Tool (on the Server)&#xA;&lt;/h3>&#xA;&lt;p>&#xA;    Decide how to customize the tool so that it supports the Development Process in the best way.&amp;nbsp; The following are&#xA;    some brief examples of how you can customize tools:&#xA;&lt;/p>&#xA;&lt;h4>&#xA;    Modeling tools&#xA;&lt;/h4>&#xA;&lt;p>&#xA;    You can create a template model that defines the structure of models. The template model will be used when creating a&#xA;    new model. You can create a file in which you define what stereotypes to use, and their icons. Then this file can be&#xA;    installed on all users' computers, so that they use the same set of stereotypes.&#xA;&lt;/p>&#xA;&lt;h4>&#xA;    Requirements and Change Management tools&#xA;&lt;/h4>&#xA;&lt;p>&#xA;    You can create a project template, in which you define the attribute types to use. You can start with provided&#xA;    templates and customize according to your needs.&#xA;&lt;/p>&#xA;&lt;h4>&#xA;    Configuration Management tools&#xA;&lt;/h4>&#xA;&lt;p>&#xA;    You can often configure actions in response to 'events' that make the tool behave in a certain way. For example, you&#xA;    can customize the tool so that when a user checks-in an item, a script is automatically executed that does some&#xA;    checking on the item.&amp;nbsp; There may also be customizations that support distributed development, such as &quot;multi-site&quot;&#xA;    support with duplicated repositories.&#xA;&lt;/p>&#xA;&lt;h3>&#xA;    Document the customizations in your process.&lt;br />&#xA;    &lt;br />&#xA;    Integrate with Other Tools&#xA;&lt;/h3>&#xA;&lt;p>&#xA;    Integrate the tool with other tools to make it easier to use. An integration between tools is in most cases in the form&#xA;    of an extension to one or several tools. An 'integration extension' to a tool typically:&#xA;&lt;/p>&#xA;&lt;p>&#xA;    Synchronize data between the different tools. It automates the creation and maintenance of related items in development&#xA;    projects&lt;br />&#xA;    Automatically adds traceability between related items in different tools.&lt;br />&#xA;    Allow the user to add traceability between items in different tools.&lt;br />&#xA;    Allow the user to navigate between tools. For example, access an item in a test tool from a requirements management&#xA;    tool.&lt;br />&#xA;    Allow the user to run certain functionality from one tool. For example, the possibility to create items in another&#xA;    tool.&lt;br />&#xA;    Allow the user to version a tool's items in a configuration management tool. For example, the possibility to version&#xA;    control requirements (from RequisitePro) using ClearCase.&lt;br />&#xA;    Most tools offer ready-to-use extensions to integrate tools with each other.&#xA;&lt;/p>&#xA;&lt;p>&#xA;    Describe how the tools are integrated with each other in the process.&#xA;&lt;/p>&#xA;&lt;h3>&#xA;    Install and Customize Tools on Clients&#xA;&lt;/h3>&#xA;&lt;p>&#xA;    Install the tool on each client. The least that is needed to do when installing a tool on the client side, is to set up&#xA;    the connection to the repository on the server.&lt;br />&#xA;    &lt;br />&#xA;    Customize the tool on the clients, just as you customized the tool on the server:&lt;br />&#xA;    &lt;br />&#xA;    In some cases you do not have to do anything with the client. For example, if the client is a web-interface it is&#xA;    enough that the clients get the address to the application on the server. Some tools allow you to do all customization&#xA;    on the server side. When the users access the repository on the server, they automatically get the correct&#xA;    settings.&lt;br />&#xA;    In other cases you customize the tool on the client by installing software that customizes the tool, or installing&#xA;    files with customization information.&lt;br />&#xA;    It may be necessary to install 'integration software' on the client. Place the 'integration software' on a server and&#xA;    allow the users to download and install it on their computers.&lt;br />&#xA;    &lt;br />&#xA;    If it possible you should automate the tool installation, and the tool customization for the users. The benefit of&#xA;    creating installation programs is that it allows you to set up the tools so that the clients get all the right&#xA;    settings, extensions, and connections to the repository. You create installation (and customization) programs, and&#xA;    place them on a server. Then the users download these programs and run them to install and customize the tool in their&#xA;    computer.&#xA;&lt;/p>&#xA;&lt;h3>&#xA;    Setting up workspaces&#xA;&lt;/h3>&#xA;&lt;p>&#xA;    Most project teams require workspaces for a variety of purposes including:&#xA;&lt;/p>&#xA;&lt;p>&#xA;    - development workspaces for individuals to do their work&#xA;&lt;/p>&#xA;&lt;p>&#xA;    - integration workspaces for individuals to share their work&#xA;&lt;/p>&#xA;&lt;p>&#xA;    - build workspaces for builds that have achieved a certain level of quality&#xA;&lt;/p>&#xA;&lt;p>&#xA;    Part of setting up the tool environment is to set up the needed workspaces and the policies for how they are used.&#xA;&lt;/p>" longPresentationName="new_guideline,_A1qOACu3Ed-UrP371xHUyw"/>
