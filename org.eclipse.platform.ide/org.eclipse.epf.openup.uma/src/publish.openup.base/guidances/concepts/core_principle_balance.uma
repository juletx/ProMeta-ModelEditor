<?xml version="1.0" encoding="UTF-8"?>
<org.eclipse.epf.uma:ContentDescription xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:org.eclipse.epf.uma="http://www.eclipse.org/epf/uma/1.0.6/uma.ecore" xmi:id="-I4IbR1GW6IFBCdq9SiMUsw" name="core_principle_balance,_ssG6MMvpEdqukPpotm3DYg" guid="-I4IbR1GW6IFBCdq9SiMUsw" changeDate="2008-01-23T14:11:19.000+0100" changeDescription="Removed metaphorical photo Removed open_up from page name." version="0.02" mainDescription="&lt;h3>&#xA;    Introduction&#xA;&lt;/h3>&#xA;&lt;p>&#xA;    Systems are rarely all things to all people. Often, attempts to make them so are wasteful, and result in bloated&#xA;    systems.&#xA;&lt;/p>&#xA;&lt;p>&#xA;    To be successful, stakeholders and the project participants must converge on a clear understanding and agreement of&#xA;    these three factors:&#xA;&lt;/p>&#xA;&lt;ul>&#xA;    &lt;li>&#xA;        Problem to be solved&#xA;    &lt;/li>&#xA;    &lt;li>&#xA;        Constraints placed on the development team (cost, schedule, resources, regulations, and so on)&#xA;    &lt;/li>&#xA;    &lt;li>&#xA;        Constraints placed on the solution&#xA;    &lt;/li>&#xA;&lt;/ul>&#xA;&lt;p>&#xA;    The challenge for all project participants is creating a solution that maximizes the value delivered to the&#xA;    stakeholders, subject to the constraints. Balance is about making the critical, cost-benefit trade-offs between desired&#xA;    features and the subsequent design decisions that define the architecture of the system.&#xA;&lt;/p>&#xA;&lt;p>&#xA;    Discovering the balance point is challenging, elusive, and ongoing, because the balance point is dynamic. As the system&#xA;    evolves, stakeholder needs change, new opportunities appear, risks are resolved, new risks appear, and the development&#xA;    team discovers new realities about the system. Change happens throughout the development cycle. stakeholders and team&#xA;    members must be prepared to re-evaluate commitments, reset expectations, and adjust plans accordingly as the system&#xA;    evolves.&#xA;&lt;/p>&#xA;&lt;h3>&#xA;    Practices&#xA;&lt;/h3>&#xA;&lt;h4>&#xA;    Know your audience&#xA;&lt;/h4>&#xA;&lt;blockquote>&#xA;    &lt;p>&#xA;        You cannot know how to make effective trade-offs if you do not know who the stakeholders are and what they really&#xA;        want.&#xA;    &lt;/p>&#xA;    &lt;p>&#xA;        Get to know your stakeholders. Better yet, work closely with them to ensure that you know their needs. Start by&#xA;        identifying all stakeholders, and then maintain open and frequent communication and collaboration between them and&#xA;        the development team.&#xA;    &lt;/p>&#xA;&lt;/blockquote>&#xA;&lt;h4>&#xA;    Separate the problem from the solution&#xA;&lt;/h4>&#xA;&lt;blockquote>&#xA;    &lt;p>&#xA;        Too often, we run headlong into a solution without understanding the problem. After all, we are taught how to solve&#xA;        problems, not how to define problems, so that's easier. However, this limits your understanding of the problem,&#xA;        imposes artificial constraints, and makes it difficult to balance trade-offs, or to even know what the trade-offs&#xA;        are.&#xA;    &lt;/p>&#xA;    &lt;p>&#xA;        Make sure that you understand the problem before you define the solution. By clearly separating the problem (what&#xA;        the customer needs) from the solution (what the system must do), it is easier to maintain the proper focus, and&#xA;        easier to accommodate alternate ways of solving the problem.&#xA;    &lt;/p>&#xA;&lt;/blockquote>&#xA;&lt;h4>&#xA;    Create a shared understanding of the domain&#xA;&lt;/h4>&#xA;&lt;blockquote>&#xA;    &lt;p>&#xA;        Domain experts often have limited technical expertise; developers, architects, and testers often have limited&#xA;        domain expertise; and reviewers and other stakeholders often have limited time to commit to the project and learn&#xA;        the problem domain. As a result, people often have an inconsistent or poor understanding of the problem domain,&#xA;        which causes communication problems and increases the likelihood of delivering poor value to the stakeholders.&#xA;    &lt;/p>&#xA;    &lt;p>&#xA;        Enhance and share all parties' understandings of the domain. A concise and shared understanding of the problem&#xA;        domain enhances communication and project effectiveness. Start by defining the problem in the Vision document. As&#xA;        your understanding increases, capture key domain concepts and terminology in the Glossary to ensure a consistent,&#xA;        shared use of the language of the domain.&#xA;    &lt;/p>&#xA;&lt;/blockquote>&#xA;&lt;h4>&#xA;    Use scenarios and use cases to capture requirements&#xA;&lt;/h4>&#xA;&lt;blockquote>&#xA;    &lt;p>&#xA;        Many companies still document requirements as a list of declarative statements, which are sometimes called the&#xA;        &quot;shall statements.&quot; These lists are often difficult for stakeholders to understand, because they require the end&#xA;        user to read through and mentally translate the list into a visualization of how the requirements will interact&#xA;        with the system.&#xA;    &lt;/p>&#xA;    &lt;p>&#xA;        Make use of scenarios and use cases to capture functional requirements in a form that is easy for stakeholders to&#xA;        understand. Nonfunctional requirements, such as performance, stability, or usability requirements, are important&#xA;        and can be documented as system-wide requirements, using traditional techniques.&#xA;    &lt;/p>&#xA;&lt;/blockquote>&#xA;&lt;h4>&#xA;    Establish and maintain agreement on priorities&#xA;&lt;/h4>&#xA;&lt;blockquote>&#xA;    &lt;p>&#xA;        Making poor decisions in deciding what to develop next can result in wasted effort, delivering capabilities that&#xA;        are never used, or identifying problems late in the project (resulting in delays and even project failure).&#xA;    &lt;/p>&#xA;    &lt;p>&#xA;        Prioritize requirements for implementation by regularly working with the stakeholders during product evolution.&#xA;        Make choices that deliver value and reduce risks, while building a system that can evolve.&#xA;    &lt;/p>&#xA;&lt;/blockquote>&#xA;&lt;h4>&#xA;    Make trade-offs to maximize value&#xA;&lt;/h4>&#xA;&lt;blockquote>&#xA;    &lt;p>&#xA;        Cost-benefit trade-offs cannot be made independent of the architecture. Requirements establish the benefits of the&#xA;        system to the stakeholder, while architecture establishes the cost. The cost of a benefit may influence the&#xA;        stakeholder's perceived value of the benefit.&#xA;    &lt;/p>&#xA;    &lt;p>&#xA;        Work with the stakeholders and team members to prioritize requirements and develop candidate architectures to&#xA;        implement those solutions. Use the candidate architectures to evaluate the cost of the benefits. Candidate&#xA;        solutions are considered at a high level when determining architectural feasibility. Different architectural&#xA;        perspectives can result in different assessments of cost versus benefit. The candidate architecture that provides&#xA;        the most coverage at the lowest cost is selected for further development.&#xA;    &lt;/p>&#xA;&lt;/blockquote>&#xA;&lt;h4>&#xA;    Manage scope&#xA;&lt;/h4>&#xA;&lt;blockquote>&#xA;    &lt;p>&#xA;        Change is inevitable. Although change presents opportunities to enhance stakeholder value, unconstrained change&#xA;        will result in a bloated, deficient system and unmet stakeholder needs.&#xA;    &lt;/p>&#xA;    &lt;p>&#xA;        Manage change while maintaining agreements with the stakeholders. Modern processes always manage change,&#xA;        continually adapting to changes in the environment and stakeholder needs, assessing the impact of changes, making&#xA;        trade-offs, and re-prioritizing work. stakeholder and developer expectations must be realistic and aligned&#xA;        throughout the development lifecycle.&#xA;    &lt;/p>&#xA;&lt;/blockquote>&#xA;&lt;h4>&#xA;    Know when to stop&#xA;&lt;/h4>&#xA;&lt;blockquote>&#xA;    &lt;p>&#xA;        Over-engineering a system not only wastes resources, but also leads to an overly complex system.&#xA;    &lt;/p>&#xA;    &lt;p>&#xA;        Stop developing the system when the desired quality is achieved. Remember that &quot;Quality is conformance to the&#xA;        requirements&quot; &lt;a href=&quot;./../../../core.mgmt.common.base/guidances/supportingmaterials/references.mgmt_D80619F3.html#CRO79&quot; guid=&quot;_JlTPUM6aEdyuBO4ZIzcyig&quot;>[CRO79]&lt;/a>. This is what gives a sense of closure to the practice. Separate the&#xA;        problem from the solution, ensuring that the solution does, indeed, solve the problem. After the critical&#xA;        requirements are implemented and validated, the system is ready for stakeholder acceptance.&#xA;    &lt;/p>&#xA;&lt;/blockquote>" longPresentationName="core_principle_balance,_ssG6MMvpEdqukPpotm3DYg"/>
